// This is a generated file, modify: generate/templates/struct_content.cc.
#include <nan.h>
#include <string.h>
#include <chrono>
#include <thread>

extern "C" {
  #include <git2.h>
 }

#include <iostream>
#include "../include/functions/copy.h"
#include "../include/cherrypick_options.h"

  #include "../include/merge_options.h"
  #include "../include/checkout_options.h"
 
using namespace v8;
using namespace node;
using namespace std;


// generated from struct_content.cc
GitCherrypickOptions::GitCherrypickOptions() {
   git_cherrypick_options wrappedValue = GIT_CHERRYPICK_OPTIONS_INIT;
   this->raw = (git_cherrypick_options*) malloc(sizeof(git_cherrypick_options));
  memcpy(this->raw, &wrappedValue, sizeof(git_cherrypick_options));

  this->ConstructFields();
  this->selfFreeing = true;
}

GitCherrypickOptions::GitCherrypickOptions(git_cherrypick_options* raw, bool selfFreeing) {
  this->raw = raw;
  this->ConstructFields();
  this->selfFreeing = selfFreeing;
}

GitCherrypickOptions::~GitCherrypickOptions() {
             
  if (this->selfFreeing) {
    free(this->raw);
  }
}

void GitCherrypickOptions::ConstructFields() {
                Local<Object> merge_optsTemp = GitMergeOptions::New(
            &this->raw->merge_opts,
            false
          )->ToObject();
          NanAssignPersistent(this->merge_opts, merge_optsTemp);

             Local<Object> checkout_optsTemp = GitCheckoutOptions::New(
            &this->raw->checkout_opts,
            false
          )->ToObject();
          NanAssignPersistent(this->checkout_opts, checkout_optsTemp);

    }

void GitCherrypickOptions::InitializeComponent(Handle<v8::Object> target) {
  NanScope();

  Local<FunctionTemplate> tpl = NanNew<FunctionTemplate>(JSNewFunction);

  tpl->InstanceTemplate()->SetInternalFieldCount(1);
  tpl->SetClassName(NanNew<String>("CherrypickOptions"));

      tpl->InstanceTemplate()->SetAccessor(NanNew<String>("version"), GetVersion, SetVersion);
        tpl->InstanceTemplate()->SetAccessor(NanNew<String>("mainline"), GetMainline, SetMainline);
        tpl->InstanceTemplate()->SetAccessor(NanNew<String>("mergeOpts"), GetMergeOpts, SetMergeOpts);
        tpl->InstanceTemplate()->SetAccessor(NanNew<String>("checkoutOpts"), GetCheckoutOpts, SetCheckoutOpts);
   
  Local<Function> _constructor_template = tpl->GetFunction();
  NanAssignPersistent(constructor_template, _constructor_template);
  target->Set(NanNew<String>("CherrypickOptions"), _constructor_template);
}

NAN_METHOD(GitCherrypickOptions::JSNewFunction) {
  NanScope();
  GitCherrypickOptions* instance;

  if (args.Length() == 0 || !args[0]->IsExternal()) {
    instance = new GitCherrypickOptions();
  }
  else {
    instance = new GitCherrypickOptions(static_cast<git_cherrypick_options*>(Handle<External>::Cast(args[0])->Value()), args[1]->BooleanValue());
  }

  instance->Wrap(args.This());

  NanReturnValue(args.This());
}

Handle<v8::Value> GitCherrypickOptions::New(void* raw, bool selfFreeing) {
  NanEscapableScope();

  Handle<v8::Value> argv[2] = { NanNew<External>((void *)raw), NanNew<Boolean>(selfFreeing) };
  return NanEscapeScope(NanNew<Function>(GitCherrypickOptions::constructor_template)->NewInstance(2, argv));
}

git_cherrypick_options *GitCherrypickOptions::GetValue() {
  return this->raw;
}

git_cherrypick_options **GitCherrypickOptions::GetRefValue() {
  return this->raw == NULL ? NULL : &this->raw;
}

void GitCherrypickOptions::ClearValue() {
  this->raw = NULL;
}

    NAN_GETTER(GitCherrypickOptions::GetVersion) {
      NanScope();

      GitCherrypickOptions *wrapper = ObjectWrap::Unwrap<GitCherrypickOptions>(args.This());

        NanReturnValue(NanNew<Number>(wrapper->GetValue()->version));
     }

    NAN_SETTER(GitCherrypickOptions::SetVersion) {
      NanScope();

      GitCherrypickOptions *wrapper = ObjectWrap::Unwrap<GitCherrypickOptions>(args.This());

         if (value->IsNumber()) {
          wrapper->GetValue()->version = (unsigned int) value->Int32Value();
        }
     }

      NAN_GETTER(GitCherrypickOptions::GetMainline) {
      NanScope();

      GitCherrypickOptions *wrapper = ObjectWrap::Unwrap<GitCherrypickOptions>(args.This());

        NanReturnValue(NanNew<Number>(wrapper->GetValue()->mainline));
     }

    NAN_SETTER(GitCherrypickOptions::SetMainline) {
      NanScope();

      GitCherrypickOptions *wrapper = ObjectWrap::Unwrap<GitCherrypickOptions>(args.This());

         if (value->IsNumber()) {
          wrapper->GetValue()->mainline = (unsigned int) value->Int32Value();
        }
     }

      NAN_GETTER(GitCherrypickOptions::GetMergeOpts) {
      NanScope();

      GitCherrypickOptions *wrapper = ObjectWrap::Unwrap<GitCherrypickOptions>(args.This());

        NanReturnValue(NanNew(wrapper->merge_opts));

     }

    NAN_SETTER(GitCherrypickOptions::SetMergeOpts) {
      NanScope();

      GitCherrypickOptions *wrapper = ObjectWrap::Unwrap<GitCherrypickOptions>(args.This());

        Handle<Object> merge_opts(value->ToObject());
        NanDisposePersistent(wrapper->merge_opts);

        NanAssignPersistent(wrapper->merge_opts, merge_opts);

        wrapper->raw->merge_opts = *  ObjectWrap::Unwrap<GitMergeOptions>(merge_opts->ToObject())->GetValue() ;

     }

      NAN_GETTER(GitCherrypickOptions::GetCheckoutOpts) {
      NanScope();

      GitCherrypickOptions *wrapper = ObjectWrap::Unwrap<GitCherrypickOptions>(args.This());

        NanReturnValue(NanNew(wrapper->checkout_opts));

     }

    NAN_SETTER(GitCherrypickOptions::SetCheckoutOpts) {
      NanScope();

      GitCherrypickOptions *wrapper = ObjectWrap::Unwrap<GitCherrypickOptions>(args.This());

        Handle<Object> checkout_opts(value->ToObject());
        NanDisposePersistent(wrapper->checkout_opts);

        NanAssignPersistent(wrapper->checkout_opts, checkout_opts);

        wrapper->raw->checkout_opts = *  ObjectWrap::Unwrap<GitCheckoutOptions>(checkout_opts->ToObject())->GetValue() ;

     }

   
Persistent<Function> GitCherrypickOptions::constructor_template;
