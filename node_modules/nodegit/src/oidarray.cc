// This is a generated file, modify: generate/templates/class_content.cc.
#include <nan.h>
#include <string.h>
#include <chrono>
#include <thread>

extern "C" {
  #include <git2.h>
 }

#include "../include/functions/copy.h"
#include "../include/macros.h"
#include "../include/oidarray.h"

  #include "../include/oid.h"
  #include "../include/oidarray.h"
 
#include <iostream>

using namespace std;
using namespace v8;
using namespace node;

  GitOidarray::GitOidarray(git_oidarray *raw, bool selfFreeing) {
    this->raw = raw;
    this->selfFreeing = selfFreeing;
  }

  GitOidarray::~GitOidarray() {
      if (this->selfFreeing) {
        git_oidarray_free(this->raw);
        this->raw = NULL;
      }
 
    // this will cause an error if you have a non-self-freeing object that also needs
    // to save values. Since the object that will eventually free the object has no
    // way of knowing to free these values.
    
  }

  void GitOidarray::InitializeComponent(Handle<v8::Object> target) {
    NanScope();

    Local<FunctionTemplate> tpl = NanNew<FunctionTemplate>(JSNewFunction);

    tpl->InstanceTemplate()->SetInternalFieldCount(1);
    tpl->SetClassName(NanNew<String>("Oidarray"));

          NODE_SET_PROTOTYPE_METHOD(tpl, "free", Free);
           NODE_SET_PROTOTYPE_METHOD(tpl, "ids", Ids);
         NODE_SET_PROTOTYPE_METHOD(tpl, "count", Count);
  
    Local<Function> _constructor_template = tpl->GetFunction();
    NanAssignPersistent(constructor_template, _constructor_template);
    target->Set(NanNew<String>("Oidarray"), _constructor_template);
  }

  NAN_METHOD(GitOidarray::JSNewFunction) {
    NanScope();

    if (args.Length() == 0 || !args[0]->IsExternal()) {
         return NanThrowError("A new GitOidarray cannot be instantiated.");
     }

    GitOidarray* object = new GitOidarray(static_cast<git_oidarray *>(Handle<External>::Cast(args[0])->Value()), args[1]->BooleanValue());
    object->Wrap(args.This());

    NanReturnValue(args.This());
  }

  Handle<v8::Value> GitOidarray::New(void *raw, bool selfFreeing) {
    NanEscapableScope();
    Handle<v8::Value> argv[2] = { NanNew<External>((void *)raw), NanNew<Boolean>(selfFreeing) };
    return NanEscapeScope(NanNew<Function>(GitOidarray::constructor_template)->NewInstance(2, argv));
  }

  git_oidarray *GitOidarray::GetValue() {
    return this->raw;
  }

  git_oidarray **GitOidarray::GetRefValue() {
    return this->raw == NULL ? NULL : &this->raw;
  }

  void GitOidarray::ClearValue() {
    this->raw = NULL;
  }

  
/*
     */
NAN_METHOD(GitOidarray::Free) {
  NanEscapableScope();

if (ObjectWrap::Unwrap<GitOidarray>(args.This())->GetValue() != NULL) {
 git_oidarray_free(
ObjectWrap::Unwrap<GitOidarray>(args.This())->GetValue()
  );

  ObjectWrap::Unwrap<GitOidarray>(args.This())->ClearValue();
}
   NanReturnUndefined();
}
       NAN_METHOD(GitOidarray::Ids) {
      NanScope();
      Handle<v8::Value> to;

       git_oid *
          ids =
          ObjectWrap::Unwrap<GitOidarray>(args.This())->GetValue()->ids;
 // start convert_to_v8 block
  
  if (ids != NULL) {
    // GitOid ids
       to = GitOid::New((void *)ids, false);
   }
  else {
    to = NanNull();
  }

 // end convert_to_v8 block
      NanReturnValue(to);
    }
     NAN_METHOD(GitOidarray::Count) {
      NanScope();
      Handle<v8::Value> to;

       size_t
         count =
         ObjectWrap::Unwrap<GitOidarray>(args.This())->GetValue()->count;
 // start convert_to_v8 block
     to = NanNew<Number>( count);
  // end convert_to_v8 block
      NanReturnValue(to);
    }
    Persistent<Function> GitOidarray::constructor_template;
 