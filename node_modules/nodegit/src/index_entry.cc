// This is a generated file, modify: generate/templates/struct_content.cc.
#include <nan.h>
#include <string.h>
#include <chrono>
#include <thread>

extern "C" {
  #include <git2.h>
 }

#include <iostream>
#include "../include/functions/copy.h"
#include "../include/index_entry.h"

  #include "../include/index_time.h"
  #include "../include/oid.h"
 
using namespace v8;
using namespace node;
using namespace std;


// generated from struct_content.cc
GitIndexEntry::GitIndexEntry() {
  git_index_entry* wrappedValue = new git_index_entry;
   this->raw = (git_index_entry*) malloc(sizeof(git_index_entry));
  memcpy(this->raw, &wrappedValue, sizeof(git_index_entry));

  this->ConstructFields();
  this->selfFreeing = true;
}

GitIndexEntry::GitIndexEntry(git_index_entry* raw, bool selfFreeing) {
  this->raw = raw;
  this->ConstructFields();
  this->selfFreeing = selfFreeing;
}

GitIndexEntry::~GitIndexEntry() {
                                    
  if (this->selfFreeing) {
    free(this->raw);
  }
}

void GitIndexEntry::ConstructFields() {
          Local<Object> ctimeTemp = GitIndexTime::New(
            &this->raw->ctime,
            false
          )->ToObject();
          NanAssignPersistent(this->ctime, ctimeTemp);

             Local<Object> mtimeTemp = GitIndexTime::New(
            &this->raw->mtime,
            false
          )->ToObject();
          NanAssignPersistent(this->mtime, mtimeTemp);

                              Local<Object> idTemp = GitOid::New(
            &this->raw->id,
            false
          )->ToObject();
          NanAssignPersistent(this->id, idTemp);

             }

void GitIndexEntry::InitializeComponent(Handle<v8::Object> target) {
  NanScope();

  Local<FunctionTemplate> tpl = NanNew<FunctionTemplate>(JSNewFunction);

  tpl->InstanceTemplate()->SetInternalFieldCount(1);
  tpl->SetClassName(NanNew<String>("IndexEntry"));

      tpl->InstanceTemplate()->SetAccessor(NanNew<String>("ctime"), GetCtime, SetCtime);
        tpl->InstanceTemplate()->SetAccessor(NanNew<String>("mtime"), GetMtime, SetMtime);
        tpl->InstanceTemplate()->SetAccessor(NanNew<String>("dev"), GetDev, SetDev);
        tpl->InstanceTemplate()->SetAccessor(NanNew<String>("ino"), GetIno, SetIno);
        tpl->InstanceTemplate()->SetAccessor(NanNew<String>("mode"), GetMode, SetMode);
        tpl->InstanceTemplate()->SetAccessor(NanNew<String>("uid"), GetUid, SetUid);
        tpl->InstanceTemplate()->SetAccessor(NanNew<String>("gid"), GetGid, SetGid);
        tpl->InstanceTemplate()->SetAccessor(NanNew<String>("fileSize"), GetFileSize, SetFileSize);
        tpl->InstanceTemplate()->SetAccessor(NanNew<String>("id"), GetId, SetId);
        tpl->InstanceTemplate()->SetAccessor(NanNew<String>("flags"), GetFlags, SetFlags);
        tpl->InstanceTemplate()->SetAccessor(NanNew<String>("flagsExtended"), GetFlagsExtended, SetFlagsExtended);
        tpl->InstanceTemplate()->SetAccessor(NanNew<String>("path"), GetPath, SetPath);
   
  Local<Function> _constructor_template = tpl->GetFunction();
  NanAssignPersistent(constructor_template, _constructor_template);
  target->Set(NanNew<String>("IndexEntry"), _constructor_template);
}

NAN_METHOD(GitIndexEntry::JSNewFunction) {
  NanScope();
  GitIndexEntry* instance;

  if (args.Length() == 0 || !args[0]->IsExternal()) {
    instance = new GitIndexEntry();
  }
  else {
    instance = new GitIndexEntry(static_cast<git_index_entry*>(Handle<External>::Cast(args[0])->Value()), args[1]->BooleanValue());
  }

  instance->Wrap(args.This());

  NanReturnValue(args.This());
}

Handle<v8::Value> GitIndexEntry::New(void* raw, bool selfFreeing) {
  NanEscapableScope();

  Handle<v8::Value> argv[2] = { NanNew<External>((void *)raw), NanNew<Boolean>(selfFreeing) };
  return NanEscapeScope(NanNew<Function>(GitIndexEntry::constructor_template)->NewInstance(2, argv));
}

git_index_entry *GitIndexEntry::GetValue() {
  return this->raw;
}

git_index_entry **GitIndexEntry::GetRefValue() {
  return this->raw == NULL ? NULL : &this->raw;
}

void GitIndexEntry::ClearValue() {
  this->raw = NULL;
}

    NAN_GETTER(GitIndexEntry::GetCtime) {
      NanScope();

      GitIndexEntry *wrapper = ObjectWrap::Unwrap<GitIndexEntry>(args.This());

        NanReturnValue(NanNew(wrapper->ctime));

     }

    NAN_SETTER(GitIndexEntry::SetCtime) {
      NanScope();

      GitIndexEntry *wrapper = ObjectWrap::Unwrap<GitIndexEntry>(args.This());

        Handle<Object> ctime(value->ToObject());
        NanDisposePersistent(wrapper->ctime);

        NanAssignPersistent(wrapper->ctime, ctime);

        wrapper->raw->ctime = *  ObjectWrap::Unwrap<GitIndexTime>(ctime->ToObject())->GetValue() ;

     }

      NAN_GETTER(GitIndexEntry::GetMtime) {
      NanScope();

      GitIndexEntry *wrapper = ObjectWrap::Unwrap<GitIndexEntry>(args.This());

        NanReturnValue(NanNew(wrapper->mtime));

     }

    NAN_SETTER(GitIndexEntry::SetMtime) {
      NanScope();

      GitIndexEntry *wrapper = ObjectWrap::Unwrap<GitIndexEntry>(args.This());

        Handle<Object> mtime(value->ToObject());
        NanDisposePersistent(wrapper->mtime);

        NanAssignPersistent(wrapper->mtime, mtime);

        wrapper->raw->mtime = *  ObjectWrap::Unwrap<GitIndexTime>(mtime->ToObject())->GetValue() ;

     }

      NAN_GETTER(GitIndexEntry::GetDev) {
      NanScope();

      GitIndexEntry *wrapper = ObjectWrap::Unwrap<GitIndexEntry>(args.This());

        NanReturnValue(NanNew<Number>(wrapper->GetValue()->dev));
     }

    NAN_SETTER(GitIndexEntry::SetDev) {
      NanScope();

      GitIndexEntry *wrapper = ObjectWrap::Unwrap<GitIndexEntry>(args.This());

         if (value->IsNumber()) {
          wrapper->GetValue()->dev = (unsigned int) value->Int32Value();
        }
     }

      NAN_GETTER(GitIndexEntry::GetIno) {
      NanScope();

      GitIndexEntry *wrapper = ObjectWrap::Unwrap<GitIndexEntry>(args.This());

        NanReturnValue(NanNew<Number>(wrapper->GetValue()->ino));
     }

    NAN_SETTER(GitIndexEntry::SetIno) {
      NanScope();

      GitIndexEntry *wrapper = ObjectWrap::Unwrap<GitIndexEntry>(args.This());

         if (value->IsNumber()) {
          wrapper->GetValue()->ino = (unsigned int) value->Int32Value();
        }
     }

      NAN_GETTER(GitIndexEntry::GetMode) {
      NanScope();

      GitIndexEntry *wrapper = ObjectWrap::Unwrap<GitIndexEntry>(args.This());

        NanReturnValue(NanNew<Number>(wrapper->GetValue()->mode));
     }

    NAN_SETTER(GitIndexEntry::SetMode) {
      NanScope();

      GitIndexEntry *wrapper = ObjectWrap::Unwrap<GitIndexEntry>(args.This());

         if (value->IsNumber()) {
          wrapper->GetValue()->mode = (unsigned int) value->Int32Value();
        }
     }

      NAN_GETTER(GitIndexEntry::GetUid) {
      NanScope();

      GitIndexEntry *wrapper = ObjectWrap::Unwrap<GitIndexEntry>(args.This());

        NanReturnValue(NanNew<Number>(wrapper->GetValue()->uid));
     }

    NAN_SETTER(GitIndexEntry::SetUid) {
      NanScope();

      GitIndexEntry *wrapper = ObjectWrap::Unwrap<GitIndexEntry>(args.This());

         if (value->IsNumber()) {
          wrapper->GetValue()->uid = (unsigned int) value->Int32Value();
        }
     }

      NAN_GETTER(GitIndexEntry::GetGid) {
      NanScope();

      GitIndexEntry *wrapper = ObjectWrap::Unwrap<GitIndexEntry>(args.This());

        NanReturnValue(NanNew<Number>(wrapper->GetValue()->gid));
     }

    NAN_SETTER(GitIndexEntry::SetGid) {
      NanScope();

      GitIndexEntry *wrapper = ObjectWrap::Unwrap<GitIndexEntry>(args.This());

         if (value->IsNumber()) {
          wrapper->GetValue()->gid = (unsigned int) value->Int32Value();
        }
     }

      NAN_GETTER(GitIndexEntry::GetFileSize) {
      NanScope();

      GitIndexEntry *wrapper = ObjectWrap::Unwrap<GitIndexEntry>(args.This());

        NanReturnValue(NanNew((int)wrapper->GetValue()->file_size));

     }

    NAN_SETTER(GitIndexEntry::SetFileSize) {
      NanScope();

      GitIndexEntry *wrapper = ObjectWrap::Unwrap<GitIndexEntry>(args.This());

        if (value->IsNumber()) {
          wrapper->GetValue()->file_size = (git_off_t) value->Int32Value();
        }

     }

      NAN_GETTER(GitIndexEntry::GetId) {
      NanScope();

      GitIndexEntry *wrapper = ObjectWrap::Unwrap<GitIndexEntry>(args.This());

        NanReturnValue(NanNew(wrapper->id));

     }

    NAN_SETTER(GitIndexEntry::SetId) {
      NanScope();

      GitIndexEntry *wrapper = ObjectWrap::Unwrap<GitIndexEntry>(args.This());

        Handle<Object> id(value->ToObject());
        NanDisposePersistent(wrapper->id);

        NanAssignPersistent(wrapper->id, id);

        wrapper->raw->id = *  ObjectWrap::Unwrap<GitOid>(id->ToObject())->GetValue() ;

     }

      NAN_GETTER(GitIndexEntry::GetFlags) {
      NanScope();

      GitIndexEntry *wrapper = ObjectWrap::Unwrap<GitIndexEntry>(args.This());

        NanReturnValue(NanNew<Number>(wrapper->GetValue()->flags));
     }

    NAN_SETTER(GitIndexEntry::SetFlags) {
      NanScope();

      GitIndexEntry *wrapper = ObjectWrap::Unwrap<GitIndexEntry>(args.This());

         if (value->IsNumber()) {
          wrapper->GetValue()->flags = (unsigned short) value->Int32Value();
        }
     }

      NAN_GETTER(GitIndexEntry::GetFlagsExtended) {
      NanScope();

      GitIndexEntry *wrapper = ObjectWrap::Unwrap<GitIndexEntry>(args.This());

        NanReturnValue(NanNew<Number>(wrapper->GetValue()->flags_extended));
     }

    NAN_SETTER(GitIndexEntry::SetFlagsExtended) {
      NanScope();

      GitIndexEntry *wrapper = ObjectWrap::Unwrap<GitIndexEntry>(args.This());

         if (value->IsNumber()) {
          wrapper->GetValue()->flags_extended = (unsigned short) value->Int32Value();
        }
     }

      NAN_GETTER(GitIndexEntry::GetPath) {
      NanScope();

      GitIndexEntry *wrapper = ObjectWrap::Unwrap<GitIndexEntry>(args.This());

        if (wrapper->GetValue()->path) {
          NanReturnValue(NanNew<String>(wrapper->GetValue()->path));
        }
        else {
          NanReturnUndefined();
        }

     }

    NAN_SETTER(GitIndexEntry::SetPath) {
      NanScope();

      GitIndexEntry *wrapper = ObjectWrap::Unwrap<GitIndexEntry>(args.This());

        if (wrapper->GetValue()->path) {
        }

        String::Utf8Value str(value);
        wrapper->GetValue()->path = strdup(*str);

     }

   
Persistent<Function> GitIndexEntry::constructor_template;
