// This is a generated file, modify: generate/templates/class_content.cc.
#include <nan.h>
#include <string.h>
#include <chrono>
#include <thread>

extern "C" {
  #include <git2.h>
    #include <git2/sys/transport.h>
 }

#include "../include/functions/copy.h"
#include "../include/macros.h"
#include "../include/transport.h"

  #include "../include/transport.h"
  #include "../include/remote.h"
 
#include <iostream>

using namespace std;
using namespace v8;
using namespace node;

  GitTransport::GitTransport(git_transport *raw, bool selfFreeing) {
    this->raw = raw;
    this->selfFreeing = selfFreeing;
  }

  GitTransport::~GitTransport() {
 
    // this will cause an error if you have a non-self-freeing object that also needs
    // to save values. Since the object that will eventually free the object has no
    // way of knowing to free these values.
             
  }

  void GitTransport::InitializeComponent(Handle<v8::Object> target) {
    NanScope();

    Local<FunctionTemplate> tpl = NanNew<FunctionTemplate>(JSNewFunction);

    tpl->InstanceTemplate()->SetInternalFieldCount(1);
    tpl->SetClassName(NanNew<String>("Transport"));

          NODE_SET_PROTOTYPE_METHOD(tpl, "init", Init);
             NODE_SET_METHOD(tpl, "sshWithPaths", SshWithPaths);
             NODE_SET_METHOD(tpl, "unregister", Unregister);
    
    Local<Function> _constructor_template = tpl->GetFunction();
    NanAssignPersistent(constructor_template, _constructor_template);
    target->Set(NanNew<String>("Transport"), _constructor_template);
  }

  NAN_METHOD(GitTransport::JSNewFunction) {
    NanScope();

    if (args.Length() == 0 || !args[0]->IsExternal()) {
         return NanThrowError("A new GitTransport cannot be instantiated.");
     }

    GitTransport* object = new GitTransport(static_cast<git_transport *>(Handle<External>::Cast(args[0])->Value()), args[1]->BooleanValue());
    object->Wrap(args.This());

    NanReturnValue(args.This());
  }

  Handle<v8::Value> GitTransport::New(void *raw, bool selfFreeing) {
    NanEscapableScope();
    Handle<v8::Value> argv[2] = { NanNew<External>((void *)raw), NanNew<Boolean>(selfFreeing) };
    return NanEscapeScope(NanNew<Function>(GitTransport::constructor_template)->NewInstance(2, argv));
  }

  git_transport *GitTransport::GetValue() {
    return this->raw;
  }

  git_transport **GitTransport::GetRefValue() {
    return this->raw == NULL ? NULL : &this->raw;
  }

  void GitTransport::ClearValue() {
    this->raw = NULL;
  }

  
/*
   * @param Number version
     * @return Number  result    */
NAN_METHOD(GitTransport::Init) {
  NanEscapableScope();

  if (args.Length() == 0 || !args[0]->IsNumber()) {
    return NanThrowError("Number version is required.");
  }

// start convert_from_v8 block
  unsigned int from_version;
  from_version = (unsigned int)   args[0]->ToNumber()->Value();
// end convert_from_v8 block
   int result = git_transport_init(
ObjectWrap::Unwrap<GitTransport>(args.This())->GetValue()
,from_version
  );

 
  Handle<v8::Value> to;
// start convert_to_v8 block
     to = NanNew<Number>( result);
  // end convert_to_v8 block
  NodeGitPsueodoNanReturnEscapingValue(to);
}
  
/*
  * @param Remote owner
   * @param Void payload
    * @param Transport callback
   */
NAN_METHOD(GitTransport::SshWithPaths) {
  NanScope();

  if (args.Length() == 0 || !args[0]->IsObject()) {
    return NanThrowError("Remote owner is required.");
  }

  if (args.Length() == 2 || !args[2]->IsFunction()) {
    return NanThrowError("Callback is required and must be a Function.");
  }

  SshWithPathsBaton* baton = new SshWithPathsBaton;

  baton->error_code = GIT_OK;
  baton->error = NULL;

  SshWithPaths_globalPayload* globalPayload = new SshWithPaths_globalPayload;
// start convert_from_v8 block
  git_remote * from_owner;
  from_owner = ObjectWrap::Unwrap<GitRemote>(args[0]->ToObject())->GetValue();
// end convert_from_v8 block
  baton->owner = from_owner;
  baton->payload = globalPayload;

  NanCallback *callback = new NanCallback(Local<Function>::Cast(args[2]));
  SshWithPathsWorker *worker = new SshWithPathsWorker(baton, callback);
  if (!args[0]->IsUndefined() && !args[0]->IsNull())
    worker->SaveToPersistent("owner", args[0]->ToObject());
  if (!args[1]->IsUndefined() && !args[1]->IsNull())
    worker->SaveToPersistent("payload", args[1]->ToObject());

  NanAsyncQueueWorker(worker);
  NanReturnUndefined();
}

void GitTransport::SshWithPathsWorker::Execute() {
  int result = git_transport_ssh_with_paths(
&baton->out,baton->owner,baton->payload    );

  baton->error_code = result;

  if (result != GIT_OK && giterr_last() != NULL) {
    baton->error = git_error_dup(giterr_last());
  }

}

void GitTransport::SshWithPathsWorker::HandleOKCallback() {
  TryCatch try_catch;

  if (baton->error_code == GIT_OK) {
    Handle<v8::Value> to;
// start convert_to_v8 block
  
  if (baton->out != NULL) {
    // GitTransport baton->out
       to = GitTransport::New((void *)baton->out, false);
   }
  else {
    to = NanNull();
  }

 // end convert_to_v8 block
    Handle<v8::Value> result = to;
    Handle<v8::Value> argv[2] = {
      NanNull(),
      result
    };
    callback->Call(2, argv);
  } else {
    if (baton->error) {
      Handle<v8::Value> argv[1] = {
        NanError(baton->error->message)
      };
      callback->Call(1, argv);
      if (baton->error->message)
        free((void *)baton->error->message);
      free((void *)baton->error);
    } else {
      callback->Call(0, NULL);
    }

  }

  if (try_catch.HasCaught()) {
    node::FatalException(try_catch);
  }

  delete (SshWithPaths_globalPayload*)baton->payload;

  delete baton;
}

   
/*
 * @param String prefix
     * @return Number  result    */
NAN_METHOD(GitTransport::Unregister) {
  NanEscapableScope();

  if (args.Length() == 0 || !args[0]->IsString()) {
    return NanThrowError("String prefix is required.");
  }

// start convert_from_v8 block
  const char * from_prefix;

  String::Utf8Value prefix(args[0]->ToString());
  from_prefix = (const char *) strdup(*prefix);
// end convert_from_v8 block
   int result = git_transport_unregister(
from_prefix
  );

 
  Handle<v8::Value> to;
// start convert_to_v8 block
     to = NanNew<Number>( result);
  // end convert_to_v8 block
  NodeGitPsueodoNanReturnEscapingValue(to);
}
      Persistent<Function> GitTransport::constructor_template;
 