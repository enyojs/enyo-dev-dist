// This is a generated file, modify: generate/templates/class_content.cc.
#include <nan.h>
#include <string.h>
#include <chrono>
#include <thread>

extern "C" {
  #include <git2.h>
 }

#include "../include/functions/copy.h"
#include "../include/macros.h"
#include "../include/index.h"

  #include "../include/str_array_converter.h"
  #include "../include/index.h"
  #include "../include/index_entry.h"
  #include "../include/strarray.h"
  #include "../include/repository.h"
  #include "../include/tree.h"
  #include "../include/oid.h"
 
#include <iostream>

using namespace std;
using namespace v8;
using namespace node;

  GitIndex::GitIndex(git_index *raw, bool selfFreeing) {
    this->raw = raw;
    this->selfFreeing = selfFreeing;
  }

  GitIndex::~GitIndex() {
      if (this->selfFreeing) {
        git_index_free(this->raw);
        this->raw = NULL;
      }
 
    // this will cause an error if you have a non-self-freeing object that also needs
    // to save values. Since the object that will eventually free the object has no
    // way of knowing to free these values.
                                                                                                                        
  }

  void GitIndex::InitializeComponent(Handle<v8::Object> target) {
    NanScope();

    Local<FunctionTemplate> tpl = NanNew<FunctionTemplate>(JSNewFunction);

    tpl->InstanceTemplate()->SetInternalFieldCount(1);
    tpl->SetClassName(NanNew<String>("Index"));

          NODE_SET_PROTOTYPE_METHOD(tpl, "add", Add);
            NODE_SET_PROTOTYPE_METHOD(tpl, "addAll", AddAll);
            NODE_SET_PROTOTYPE_METHOD(tpl, "addByPath", AddBypath);
            NODE_SET_PROTOTYPE_METHOD(tpl, "caps", Caps);
            NODE_SET_PROTOTYPE_METHOD(tpl, "clear", Clear);
            NODE_SET_PROTOTYPE_METHOD(tpl, "conflictAdd", ConflictAdd);
            NODE_SET_PROTOTYPE_METHOD(tpl, "conflictCleanup", ConflictCleanup);
            NODE_SET_PROTOTYPE_METHOD(tpl, "conflictGet", ConflictGet);
            NODE_SET_PROTOTYPE_METHOD(tpl, "conflictRemove", ConflictRemove);
             NODE_SET_METHOD(tpl, "entryStage", EntryStage);
            NODE_SET_PROTOTYPE_METHOD(tpl, "entryCount", Entrycount);
            NODE_SET_PROTOTYPE_METHOD(tpl, "getByIndex", GetByindex);
            NODE_SET_PROTOTYPE_METHOD(tpl, "getByPath", GetBypath);
            NODE_SET_PROTOTYPE_METHOD(tpl, "hasConflicts", HasConflicts);
             NODE_SET_METHOD(tpl, "open", Open);
            NODE_SET_PROTOTYPE_METHOD(tpl, "owner", Owner);
            NODE_SET_PROTOTYPE_METHOD(tpl, "path", Path);
            NODE_SET_PROTOTYPE_METHOD(tpl, "read", Read);
            NODE_SET_PROTOTYPE_METHOD(tpl, "readTree", ReadTree);
            NODE_SET_PROTOTYPE_METHOD(tpl, "remove", Remove);
            NODE_SET_PROTOTYPE_METHOD(tpl, "removeAll", RemoveAll);
            NODE_SET_PROTOTYPE_METHOD(tpl, "removeByPath", RemoveBypath);
            NODE_SET_PROTOTYPE_METHOD(tpl, "removeDirectory", RemoveDirectory);
            NODE_SET_PROTOTYPE_METHOD(tpl, "setCaps", SetCaps);
            NODE_SET_PROTOTYPE_METHOD(tpl, "updateAll", UpdateAll);
            NODE_SET_PROTOTYPE_METHOD(tpl, "write", Write);
            NODE_SET_PROTOTYPE_METHOD(tpl, "writeTree", WriteTree);
            NODE_SET_PROTOTYPE_METHOD(tpl, "writeTreeTo", WriteTreeTo);
    
    Local<Function> _constructor_template = tpl->GetFunction();
    NanAssignPersistent(constructor_template, _constructor_template);
    target->Set(NanNew<String>("Index"), _constructor_template);
  }

  NAN_METHOD(GitIndex::JSNewFunction) {
    NanScope();

    if (args.Length() == 0 || !args[0]->IsExternal()) {
         return NanThrowError("A new GitIndex cannot be instantiated.");
     }

    GitIndex* object = new GitIndex(static_cast<git_index *>(Handle<External>::Cast(args[0])->Value()), args[1]->BooleanValue());
    object->Wrap(args.This());

    NanReturnValue(args.This());
  }

  Handle<v8::Value> GitIndex::New(void *raw, bool selfFreeing) {
    NanEscapableScope();
    Handle<v8::Value> argv[2] = { NanNew<External>((void *)raw), NanNew<Boolean>(selfFreeing) };
    return NanEscapeScope(NanNew<Function>(GitIndex::constructor_template)->NewInstance(2, argv));
  }

  git_index *GitIndex::GetValue() {
    return this->raw;
  }

  git_index **GitIndex::GetRefValue() {
    return this->raw == NULL ? NULL : &this->raw;
  }

  void GitIndex::ClearValue() {
    this->raw = NULL;
  }

  
/*
   * @param IndexEntry source_entry
     * @return Number  result    */
NAN_METHOD(GitIndex::Add) {
  NanEscapableScope();

  if (args.Length() == 0 || !args[0]->IsObject()) {
    return NanThrowError("IndexEntry source_entry is required.");
  }

// start convert_from_v8 block
  const git_index_entry * from_source_entry;
  from_source_entry = ObjectWrap::Unwrap<GitIndexEntry>(args[0]->ToObject())->GetValue();
// end convert_from_v8 block
   int result = git_index_add(
ObjectWrap::Unwrap<GitIndex>(args.This())->GetValue()
,from_source_entry
  );

 
  Handle<v8::Value> to;
// start convert_to_v8 block
     to = NanNew<Number>( result);
  // end convert_to_v8 block
  NodeGitPsueodoNanReturnEscapingValue(to);
}
  
/*
   * @param Strarray pathspec
   * @param Number flags
   * @param IndexMatchedPathCb callback
   * @param Void payload
     */
NAN_METHOD(GitIndex::AddAll) {
  NanScope();

  if (args.Length() == 4 || !args[4]->IsFunction()) {
    return NanThrowError("Callback is required and must be a Function.");
  }

  AddAllBaton* baton = new AddAllBaton;

  baton->error_code = GIT_OK;
  baton->error = NULL;

  AddAll_globalPayload* globalPayload = new AddAll_globalPayload;
  baton->index = ObjectWrap::Unwrap<GitIndex>(args.This())->GetValue();
// start convert_from_v8 block
  const git_strarray * from_pathspec;

  from_pathspec = StrArrayConverter::Convert(args[0]);
// end convert_from_v8 block
  baton->pathspec = from_pathspec;
// start convert_from_v8 block
  unsigned int from_flags;
  if (args[1]->IsNumber()) {
  from_flags = (unsigned int)   args[1]->ToNumber()->Value();
  }
  else {
    from_flags = 0;
  }
// end convert_from_v8 block
  baton->flags = from_flags;
  if (!args[2]->IsFunction()) {
    baton->callback = NULL;
    globalPayload->callback = NULL;
  }
  else {
    baton->callback = AddAll_callback_cppCallback;
    globalPayload->callback = new NanCallback(args[2].As<Function>());
  }
  baton->payload = globalPayload;

  NanCallback *callback = new NanCallback(Local<Function>::Cast(args[4]));
  AddAllWorker *worker = new AddAllWorker(baton, callback);
  worker->SaveToPersistent("index", args.This());
  if (!args[0]->IsUndefined() && !args[0]->IsNull())
    worker->SaveToPersistent("pathspec", args[0]->ToObject());
  if (!args[1]->IsUndefined() && !args[1]->IsNull())
    worker->SaveToPersistent("flags", args[1]->ToObject());
  if (!args[3]->IsUndefined() && !args[3]->IsNull())
    worker->SaveToPersistent("payload", args[3]->ToObject());

  NanAsyncQueueWorker(worker);
  NanReturnUndefined();
}

void GitIndex::AddAllWorker::Execute() {
  int result = git_index_add_all(
baton->index,baton->pathspec,baton->flags,baton->callback,baton->payload    );

  baton->error_code = result;

  if (result != GIT_OK && giterr_last() != NULL) {
    baton->error = git_error_dup(giterr_last());
  }

}

void GitIndex::AddAllWorker::HandleOKCallback() {
  TryCatch try_catch;

  if (baton->error_code == GIT_OK) {
    Handle<v8::Value> result = NanUndefined();
    Handle<v8::Value> argv[2] = {
      NanNull(),
      result
    };
    callback->Call(2, argv);
  } else {
    if (baton->error) {
      Handle<v8::Value> argv[1] = {
        NanError(baton->error->message)
      };
      callback->Call(1, argv);
      if (baton->error->message)
        free((void *)baton->error->message);
      free((void *)baton->error);
    } else {
      callback->Call(0, NULL);
    }

  }

  if (try_catch.HasCaught()) {
    node::FatalException(try_catch);
  }

  delete (AddAll_globalPayload*)baton->payload;

  delete baton;
}


int GitIndex::AddAll_callback_cppCallback (
    const char * path,     const char * matched_pathspec,     void * payload  ) {
  AddAll_CallbackBaton* baton = new AddAll_CallbackBaton();

    baton->path = path;
    baton->matched_pathspec = matched_pathspec;
    baton->payload = payload;
 
  baton->result = 0;
  baton->req.data = baton;
  baton->done = false;

  uv_async_init(uv_default_loop(), &baton->req, (uv_async_cb) AddAll_callback_async);
  uv_async_send(&baton->req);

  while(!baton->done) {
    this_thread::sleep_for(chrono::milliseconds(1));
  }

  
  return baton->result;
}

void GitIndex::AddAll_callback_async(uv_async_t* req, int status) {
  NanScope();

  AddAll_CallbackBaton* baton = static_cast<AddAll_CallbackBaton*>(req->data);

    NanCallback* callback = ((AddAll_globalPayload*)baton->payload)->callback;
   
  Local<Value> argv[3] = {
           NanNew(baton->path),
             NanNew(baton->matched_pathspec),
          // payload is null because we can use closure scope in javascript
        NanUndefined()
    };

  TryCatch tryCatch;
  Handle<v8::Value> result = callback->Call(3, argv);

  if (result->IsObject() && result->ToObject()->Has(NanNew("then"))) {
    Handle<v8::Value> thenProp = result->ToObject()->Get(NanNew("then"));

    if (thenProp->IsFunction()) {
      // we can be reasonbly certain that the result is a promise
      Local<Object> promise = result->ToObject();

      NanAssignPersistent(baton->promise, promise);

      uv_close((uv_handle_t*) &baton->req, NULL);
      uv_async_init(uv_default_loop(), &baton->req, (uv_async_cb) AddAll_callback_asyncPromisePolling);
      uv_async_send(&baton->req);
      return;
    }
  }

    if (result.IsEmpty() || result->IsNativeError()) {
      baton->result = -1;
    }
    else if (!result->IsNull() && !result->IsUndefined()) {
       if (result->IsNumber()) {
        baton->result = (int)result->ToNumber()->Value();
      }
      else {
        baton->result = 1;
      }
     }
    else {
      baton->result = 1;
    }
 
  baton->done = true;
  uv_close((uv_handle_t*) &baton->req, NULL);
}

void GitIndex::AddAll_callback_asyncPromisePolling(uv_async_t* req, int status) {
  NanScope();

  AddAll_CallbackBaton* baton = static_cast<AddAll_CallbackBaton*>(req->data);
  Local<Object> promise = NanNew<Object>(baton->promise);
  NanCallback* isPendingFn = new NanCallback(promise->Get(NanNew("isPending")).As<Function>());
  Local<Value> argv[1]; // MSBUILD won't assign an array of length 0
  Local<Boolean> isPending = isPendingFn->Call(promise, 0, argv)->ToBoolean();

  if (isPending->Value()) {
    uv_async_send(&baton->req);
    return;
  }

  NanCallback* isFulfilledFn = new NanCallback(promise->Get(NanNew("isFulfilled")).As<Function>());
  Local<Boolean> isFulfilled = isFulfilledFn->Call(promise, 0, argv)->ToBoolean();

  if (isFulfilled->Value()) {
    NanCallback* resultFn = new NanCallback(promise->Get(NanNew("value")).As<Function>());
    Handle<v8::Value> result = resultFn->Call(promise, 0, argv);

      if (result.IsEmpty() || result->IsNativeError()) {
        baton->result = -1;
      }
      else if (!result->IsNull() && !result->IsUndefined()) {
         if (result->IsNumber()) {
          baton->result = (int)result->ToNumber()->Value();
        }
        else {
          baton->result = 1;
        }
       }
      else {
        baton->result = 1;
      }
     baton->done = true;
  }
  else {
    // promise was rejected
    baton->result = -1;
    baton->done = false;
  }

  uv_close((uv_handle_t*) &baton->req, NULL);
}
   
/*
   * @param String path
     * @return Number  result    */
NAN_METHOD(GitIndex::AddBypath) {
  NanEscapableScope();

  if (args.Length() == 0 || !args[0]->IsString()) {
    return NanThrowError("String path is required.");
  }

// start convert_from_v8 block
  const char * from_path;

  String::Utf8Value path(args[0]->ToString());
  from_path = (const char *) strdup(*path);
// end convert_from_v8 block
   int result = git_index_add_bypath(
ObjectWrap::Unwrap<GitIndex>(args.This())->GetValue()
,from_path
  );

 
  Handle<v8::Value> to;
// start convert_to_v8 block
     to = NanNew<Number>( result);
  // end convert_to_v8 block
  NodeGitPsueodoNanReturnEscapingValue(to);
}
   
/*
     * @return Number  result    */
NAN_METHOD(GitIndex::Caps) {
  NanEscapableScope();

   int result = git_index_caps(
ObjectWrap::Unwrap<GitIndex>(args.This())->GetValue()
  );

 
  Handle<v8::Value> to;
// start convert_to_v8 block
     to = NanNew<Number>( result);
  // end convert_to_v8 block
  NodeGitPsueodoNanReturnEscapingValue(to);
}
   
/*
     * @return Number  result    */
NAN_METHOD(GitIndex::Clear) {
  NanEscapableScope();

   int result = git_index_clear(
ObjectWrap::Unwrap<GitIndex>(args.This())->GetValue()
  );

 
  Handle<v8::Value> to;
// start convert_to_v8 block
     to = NanNew<Number>( result);
  // end convert_to_v8 block
  NodeGitPsueodoNanReturnEscapingValue(to);
}
   
/*
   * @param IndexEntry ancestor_entry
   * @param IndexEntry our_entry
   * @param IndexEntry their_entry
     * @return Number  result    */
NAN_METHOD(GitIndex::ConflictAdd) {
  NanEscapableScope();

  if (args.Length() == 0 || !args[0]->IsObject()) {
    return NanThrowError("IndexEntry ancestor_entry is required.");
  }

  if (args.Length() == 1 || !args[1]->IsObject()) {
    return NanThrowError("IndexEntry our_entry is required.");
  }

  if (args.Length() == 2 || !args[2]->IsObject()) {
    return NanThrowError("IndexEntry their_entry is required.");
  }

// start convert_from_v8 block
  const git_index_entry * from_ancestor_entry;
  from_ancestor_entry = ObjectWrap::Unwrap<GitIndexEntry>(args[0]->ToObject())->GetValue();
// end convert_from_v8 block
// start convert_from_v8 block
  const git_index_entry * from_our_entry;
  from_our_entry = ObjectWrap::Unwrap<GitIndexEntry>(args[1]->ToObject())->GetValue();
// end convert_from_v8 block
// start convert_from_v8 block
  const git_index_entry * from_their_entry;
  from_their_entry = ObjectWrap::Unwrap<GitIndexEntry>(args[2]->ToObject())->GetValue();
// end convert_from_v8 block
   int result = git_index_conflict_add(
ObjectWrap::Unwrap<GitIndex>(args.This())->GetValue()
,from_ancestor_entry
,from_our_entry
,from_their_entry
  );

 
  Handle<v8::Value> to;
// start convert_to_v8 block
     to = NanNew<Number>( result);
  // end convert_to_v8 block
  NodeGitPsueodoNanReturnEscapingValue(to);
}
   
/*
     * @return Number  result    */
NAN_METHOD(GitIndex::ConflictCleanup) {
  NanEscapableScope();

   int result = git_index_conflict_cleanup(
ObjectWrap::Unwrap<GitIndex>(args.This())->GetValue()
  );

 
  Handle<v8::Value> to;
// start convert_to_v8 block
     to = NanNew<Number>( result);
  // end convert_to_v8 block
  NodeGitPsueodoNanReturnEscapingValue(to);
}
  
/*
      * @param String path
    * @param IndexEntry callback
  * @param IndexEntry callback
  * @param IndexEntry callback
   */
NAN_METHOD(GitIndex::ConflictGet) {
  NanScope();

  if (args.Length() == 0 || !args[0]->IsString()) {
    return NanThrowError("String path is required.");
  }

  if (args.Length() == 1 || !args[1]->IsFunction()) {
    return NanThrowError("Callback is required and must be a Function.");
  }

  ConflictGetBaton* baton = new ConflictGetBaton;

  baton->error_code = GIT_OK;
  baton->error = NULL;

  baton->index = ObjectWrap::Unwrap<GitIndex>(args.This())->GetValue();
// start convert_from_v8 block
  const char * from_path;

  String::Utf8Value path(args[0]->ToString());
  from_path = (const char *) strdup(*path);
// end convert_from_v8 block
  baton->path = from_path;

  NanCallback *callback = new NanCallback(Local<Function>::Cast(args[1]));
  ConflictGetWorker *worker = new ConflictGetWorker(baton, callback);
  worker->SaveToPersistent("index", args.This());
  if (!args[0]->IsUndefined() && !args[0]->IsNull())
    worker->SaveToPersistent("path", args[0]->ToObject());

  NanAsyncQueueWorker(worker);
  NanReturnUndefined();
}

void GitIndex::ConflictGetWorker::Execute() {
  int result = git_index_conflict_get(
&baton->ancestor_out,&baton->our_out,&baton->their_out,baton->index,baton->path    );

  baton->error_code = result;

  if (result != GIT_OK && giterr_last() != NULL) {
    baton->error = git_error_dup(giterr_last());
  }

}

void GitIndex::ConflictGetWorker::HandleOKCallback() {
  TryCatch try_catch;

  if (baton->error_code == GIT_OK) {
    Handle<v8::Value> to;
    Handle<Object> result = NanNew<Object>();
// start convert_to_v8 block
  
  if (baton->ancestor_out != NULL) {
    // GitIndexEntry baton->ancestor_out
       to = GitIndexEntry::New((void *)baton->ancestor_out, false);
   }
  else {
    to = NanNull();
  }

 // end convert_to_v8 block
    result->Set(NanNew<String>("ancestor_out"), to);
// start convert_to_v8 block
  
  if (baton->our_out != NULL) {
    // GitIndexEntry baton->our_out
       to = GitIndexEntry::New((void *)baton->our_out, false);
   }
  else {
    to = NanNull();
  }

 // end convert_to_v8 block
    result->Set(NanNew<String>("our_out"), to);
// start convert_to_v8 block
  
  if (baton->their_out != NULL) {
    // GitIndexEntry baton->their_out
       to = GitIndexEntry::New((void *)baton->their_out, false);
   }
  else {
    to = NanNull();
  }

 // end convert_to_v8 block
    result->Set(NanNew<String>("their_out"), to);
    Handle<v8::Value> argv[2] = {
      NanNull(),
      result
    };
    callback->Call(2, argv);
  } else {
    if (baton->error) {
      Handle<v8::Value> argv[1] = {
        NanError(baton->error->message)
      };
      callback->Call(1, argv);
      if (baton->error->message)
        free((void *)baton->error->message);
      free((void *)baton->error);
    } else {
      callback->Call(0, NULL);
    }

  }

  if (try_catch.HasCaught()) {
    node::FatalException(try_catch);
  }

  free((void *)baton->path);

  delete baton;
}

   
/*
   * @param String path
     * @return Number  result    */
NAN_METHOD(GitIndex::ConflictRemove) {
  NanEscapableScope();

  if (args.Length() == 0 || !args[0]->IsString()) {
    return NanThrowError("String path is required.");
  }

// start convert_from_v8 block
  const char * from_path;

  String::Utf8Value path(args[0]->ToString());
  from_path = (const char *) strdup(*path);
// end convert_from_v8 block
   int result = git_index_conflict_remove(
ObjectWrap::Unwrap<GitIndex>(args.This())->GetValue()
,from_path
  );

 
  Handle<v8::Value> to;
// start convert_to_v8 block
     to = NanNew<Number>( result);
  // end convert_to_v8 block
  NodeGitPsueodoNanReturnEscapingValue(to);
}
   
/*
 * @param IndexEntry entry
     * @return Number  result    */
NAN_METHOD(GitIndex::EntryStage) {
  NanEscapableScope();

  if (args.Length() == 0 || !args[0]->IsObject()) {
    return NanThrowError("IndexEntry entry is required.");
  }

// start convert_from_v8 block
  const git_index_entry * from_entry;
  from_entry = ObjectWrap::Unwrap<GitIndexEntry>(args[0]->ToObject())->GetValue();
// end convert_from_v8 block
   int result = git_index_entry_stage(
from_entry
  );

 
  Handle<v8::Value> to;
// start convert_to_v8 block
     to = NanNew<Number>( result);
  // end convert_to_v8 block
  NodeGitPsueodoNanReturnEscapingValue(to);
}
   
/*
     * @return Number  result    */
NAN_METHOD(GitIndex::Entrycount) {
  NanEscapableScope();

   size_t result = git_index_entrycount(
ObjectWrap::Unwrap<GitIndex>(args.This())->GetValue()
  );

 
  Handle<v8::Value> to;
// start convert_to_v8 block
     to = NanNew<Number>( result);
  // end convert_to_v8 block
  NodeGitPsueodoNanReturnEscapingValue(to);
}
   
/*
   * @param Number n
     * @return IndexEntry  result    */
NAN_METHOD(GitIndex::GetByindex) {
  NanEscapableScope();

  if (args.Length() == 0 || !args[0]->IsNumber()) {
    return NanThrowError("Number n is required.");
  }

// start convert_from_v8 block
  size_t from_n;
  from_n = (size_t)   args[0]->ToNumber()->Value();
// end convert_from_v8 block
   const git_index_entry * result = git_index_get_byindex(
ObjectWrap::Unwrap<GitIndex>(args.This())->GetValue()
,from_n
  );

   // null checks on pointers
  if (!result) {
    NodeGitPsueodoNanReturnEscapingValue(NanUndefined());
  }

  Handle<v8::Value> to;
// start convert_to_v8 block
  
  if (result != NULL) {
    // GitIndexEntry result
       to = GitIndexEntry::New((void *)result, false);
   }
  else {
    to = NanNull();
  }

 // end convert_to_v8 block
  NodeGitPsueodoNanReturnEscapingValue(to);
}
   
/*
   * @param String path
   * @param Number stage
     * @return IndexEntry  result    */
NAN_METHOD(GitIndex::GetBypath) {
  NanEscapableScope();

  if (args.Length() == 0 || !args[0]->IsString()) {
    return NanThrowError("String path is required.");
  }

// start convert_from_v8 block
  const char * from_path;

  String::Utf8Value path(args[0]->ToString());
  from_path = (const char *) strdup(*path);
// end convert_from_v8 block
// start convert_from_v8 block
  int from_stage;
  if (args[1]->IsNumber()) {
  from_stage = (int)   args[1]->ToNumber()->Value();
  }
  else {
    from_stage = 0;
  }
// end convert_from_v8 block
   const git_index_entry * result = git_index_get_bypath(
ObjectWrap::Unwrap<GitIndex>(args.This())->GetValue()
,from_path
,from_stage
  );

   // null checks on pointers
  if (!result) {
    NodeGitPsueodoNanReturnEscapingValue(NanUndefined());
  }

  Handle<v8::Value> to;
// start convert_to_v8 block
  
  if (result != NULL) {
    // GitIndexEntry result
       to = GitIndexEntry::New((void *)result, false);
   }
  else {
    to = NanNull();
  }

 // end convert_to_v8 block
  NodeGitPsueodoNanReturnEscapingValue(to);
}
   
/*
     * @return Number  result    */
NAN_METHOD(GitIndex::HasConflicts) {
  NanEscapableScope();

   int result = git_index_has_conflicts(
ObjectWrap::Unwrap<GitIndex>(args.This())->GetValue()
  );

 
  Handle<v8::Value> to;
// start convert_to_v8 block
     to = NanNew<Number>( result);
  // end convert_to_v8 block
  NodeGitPsueodoNanReturnEscapingValue(to);
}
  
/*
  * @param String index_path
    * @param Index callback
   */
NAN_METHOD(GitIndex::Open) {
  NanScope();

  if (args.Length() == 0 || !args[0]->IsString()) {
    return NanThrowError("String index_path is required.");
  }

  if (args.Length() == 1 || !args[1]->IsFunction()) {
    return NanThrowError("Callback is required and must be a Function.");
  }

  OpenBaton* baton = new OpenBaton;

  baton->error_code = GIT_OK;
  baton->error = NULL;

// start convert_from_v8 block
  const char * from_index_path;

  String::Utf8Value index_path(args[0]->ToString());
  from_index_path = (const char *) strdup(*index_path);
// end convert_from_v8 block
  baton->index_path = from_index_path;

  NanCallback *callback = new NanCallback(Local<Function>::Cast(args[1]));
  OpenWorker *worker = new OpenWorker(baton, callback);
  if (!args[0]->IsUndefined() && !args[0]->IsNull())
    worker->SaveToPersistent("index_path", args[0]->ToObject());

  NanAsyncQueueWorker(worker);
  NanReturnUndefined();
}

void GitIndex::OpenWorker::Execute() {
  int result = git_index_open(
&baton->out,baton->index_path    );

  baton->error_code = result;

  if (result != GIT_OK && giterr_last() != NULL) {
    baton->error = git_error_dup(giterr_last());
  }

}

void GitIndex::OpenWorker::HandleOKCallback() {
  TryCatch try_catch;

  if (baton->error_code == GIT_OK) {
    Handle<v8::Value> to;
// start convert_to_v8 block
  
  if (baton->out != NULL) {
    // GitIndex baton->out
       to = GitIndex::New((void *)baton->out, false);
   }
  else {
    to = NanNull();
  }

 // end convert_to_v8 block
    Handle<v8::Value> result = to;
    Handle<v8::Value> argv[2] = {
      NanNull(),
      result
    };
    callback->Call(2, argv);
  } else {
    if (baton->error) {
      Handle<v8::Value> argv[1] = {
        NanError(baton->error->message)
      };
      callback->Call(1, argv);
      if (baton->error->message)
        free((void *)baton->error->message);
      free((void *)baton->error);
    } else {
      callback->Call(0, NULL);
    }

  }

  if (try_catch.HasCaught()) {
    node::FatalException(try_catch);
  }

  free((void *)baton->index_path);

  delete baton;
}

   
/*
     * @return Repository  result    */
NAN_METHOD(GitIndex::Owner) {
  NanEscapableScope();

   git_repository * result = git_index_owner(
ObjectWrap::Unwrap<GitIndex>(args.This())->GetValue()
  );

   // null checks on pointers
  if (!result) {
    NodeGitPsueodoNanReturnEscapingValue(NanUndefined());
  }

  Handle<v8::Value> to;
// start convert_to_v8 block
  
  if (result != NULL) {
    // GitRepository result
       to = GitRepository::New((void *)result, false);
   }
  else {
    to = NanNull();
  }

 // end convert_to_v8 block
  NodeGitPsueodoNanReturnEscapingValue(to);
}
   
/*
     * @return String  result    */
NAN_METHOD(GitIndex::Path) {
  NanEscapableScope();

   const char * result = git_index_path(
ObjectWrap::Unwrap<GitIndex>(args.This())->GetValue()
  );

   // null checks on pointers
  if (!result) {
    NodeGitPsueodoNanReturnEscapingValue(NanUndefined());
  }

  Handle<v8::Value> to;
// start convert_to_v8 block
  if (result){
       to = NanNew<String>(result);
   }
  else {
    to = NanNull();
  }

  // end convert_to_v8 block
  NodeGitPsueodoNanReturnEscapingValue(to);
}
   
/*
   * @param Number force
     * @return Number  result    */
NAN_METHOD(GitIndex::Read) {
  NanEscapableScope();

// start convert_from_v8 block
  int from_force;
  if (args[0]->IsNumber()) {
  from_force = (int)   args[0]->ToNumber()->Value();
  }
  else {
    from_force = 0;
  }
// end convert_from_v8 block
   int result = git_index_read(
ObjectWrap::Unwrap<GitIndex>(args.This())->GetValue()
,from_force
  );

 
  Handle<v8::Value> to;
// start convert_to_v8 block
     to = NanNew<Number>( result);
  // end convert_to_v8 block
  NodeGitPsueodoNanReturnEscapingValue(to);
}
   
/*
   * @param Tree tree
     * @return Number  result    */
NAN_METHOD(GitIndex::ReadTree) {
  NanEscapableScope();

  if (args.Length() == 0 || !args[0]->IsObject()) {
    return NanThrowError("Tree tree is required.");
  }

// start convert_from_v8 block
  const git_tree * from_tree;
  from_tree = ObjectWrap::Unwrap<GitTree>(args[0]->ToObject())->GetValue();
// end convert_from_v8 block
   int result = git_index_read_tree(
ObjectWrap::Unwrap<GitIndex>(args.This())->GetValue()
,from_tree
  );

 
  Handle<v8::Value> to;
// start convert_to_v8 block
     to = NanNew<Number>( result);
  // end convert_to_v8 block
  NodeGitPsueodoNanReturnEscapingValue(to);
}
   
/*
   * @param String path
   * @param Number stage
     * @return Number  result    */
NAN_METHOD(GitIndex::Remove) {
  NanEscapableScope();

  if (args.Length() == 0 || !args[0]->IsString()) {
    return NanThrowError("String path is required.");
  }

  if (args.Length() == 1 || !args[1]->IsNumber()) {
    return NanThrowError("Number stage is required.");
  }

// start convert_from_v8 block
  const char * from_path;

  String::Utf8Value path(args[0]->ToString());
  from_path = (const char *) strdup(*path);
// end convert_from_v8 block
// start convert_from_v8 block
  int from_stage;
  from_stage = (int)   args[1]->ToNumber()->Value();
// end convert_from_v8 block
   int result = git_index_remove(
ObjectWrap::Unwrap<GitIndex>(args.This())->GetValue()
,from_path
,from_stage
  );

 
  Handle<v8::Value> to;
// start convert_to_v8 block
     to = NanNew<Number>( result);
  // end convert_to_v8 block
  NodeGitPsueodoNanReturnEscapingValue(to);
}
  
/*
   * @param Strarray pathspec
   * @param IndexMatchedPathCb callback
   * @param Void payload
     */
NAN_METHOD(GitIndex::RemoveAll) {
  NanScope();

  if (args.Length() == 3 || !args[3]->IsFunction()) {
    return NanThrowError("Callback is required and must be a Function.");
  }

  RemoveAllBaton* baton = new RemoveAllBaton;

  baton->error_code = GIT_OK;
  baton->error = NULL;

  RemoveAll_globalPayload* globalPayload = new RemoveAll_globalPayload;
  baton->index = ObjectWrap::Unwrap<GitIndex>(args.This())->GetValue();
// start convert_from_v8 block
  const git_strarray * from_pathspec;

  from_pathspec = StrArrayConverter::Convert(args[0]);
// end convert_from_v8 block
  baton->pathspec = from_pathspec;
  if (!args[1]->IsFunction()) {
    baton->callback = NULL;
    globalPayload->callback = NULL;
  }
  else {
    baton->callback = RemoveAll_callback_cppCallback;
    globalPayload->callback = new NanCallback(args[1].As<Function>());
  }
  baton->payload = globalPayload;

  NanCallback *callback = new NanCallback(Local<Function>::Cast(args[3]));
  RemoveAllWorker *worker = new RemoveAllWorker(baton, callback);
  worker->SaveToPersistent("index", args.This());
  if (!args[0]->IsUndefined() && !args[0]->IsNull())
    worker->SaveToPersistent("pathspec", args[0]->ToObject());
  if (!args[2]->IsUndefined() && !args[2]->IsNull())
    worker->SaveToPersistent("payload", args[2]->ToObject());

  NanAsyncQueueWorker(worker);
  NanReturnUndefined();
}

void GitIndex::RemoveAllWorker::Execute() {
  int result = git_index_remove_all(
baton->index,baton->pathspec,baton->callback,baton->payload    );

  baton->error_code = result;

  if (result != GIT_OK && giterr_last() != NULL) {
    baton->error = git_error_dup(giterr_last());
  }

}

void GitIndex::RemoveAllWorker::HandleOKCallback() {
  TryCatch try_catch;

  if (baton->error_code == GIT_OK) {
    Handle<v8::Value> result = NanUndefined();
    Handle<v8::Value> argv[2] = {
      NanNull(),
      result
    };
    callback->Call(2, argv);
  } else {
    if (baton->error) {
      Handle<v8::Value> argv[1] = {
        NanError(baton->error->message)
      };
      callback->Call(1, argv);
      if (baton->error->message)
        free((void *)baton->error->message);
      free((void *)baton->error);
    } else {
      callback->Call(0, NULL);
    }

  }

  if (try_catch.HasCaught()) {
    node::FatalException(try_catch);
  }

  delete (RemoveAll_globalPayload*)baton->payload;

  delete baton;
}


int GitIndex::RemoveAll_callback_cppCallback (
    const char * path,     const char * matched_pathspec,     void * payload  ) {
  RemoveAll_CallbackBaton* baton = new RemoveAll_CallbackBaton();

    baton->path = path;
    baton->matched_pathspec = matched_pathspec;
    baton->payload = payload;
 
  baton->result = 0;
  baton->req.data = baton;
  baton->done = false;

  uv_async_init(uv_default_loop(), &baton->req, (uv_async_cb) RemoveAll_callback_async);
  uv_async_send(&baton->req);

  while(!baton->done) {
    this_thread::sleep_for(chrono::milliseconds(1));
  }

  
  return baton->result;
}

void GitIndex::RemoveAll_callback_async(uv_async_t* req, int status) {
  NanScope();

  RemoveAll_CallbackBaton* baton = static_cast<RemoveAll_CallbackBaton*>(req->data);

    NanCallback* callback = ((RemoveAll_globalPayload*)baton->payload)->callback;
   
  Local<Value> argv[3] = {
           NanNew(baton->path),
             NanNew(baton->matched_pathspec),
          // payload is null because we can use closure scope in javascript
        NanUndefined()
    };

  TryCatch tryCatch;
  Handle<v8::Value> result = callback->Call(3, argv);

  if (result->IsObject() && result->ToObject()->Has(NanNew("then"))) {
    Handle<v8::Value> thenProp = result->ToObject()->Get(NanNew("then"));

    if (thenProp->IsFunction()) {
      // we can be reasonbly certain that the result is a promise
      Local<Object> promise = result->ToObject();

      NanAssignPersistent(baton->promise, promise);

      uv_close((uv_handle_t*) &baton->req, NULL);
      uv_async_init(uv_default_loop(), &baton->req, (uv_async_cb) RemoveAll_callback_asyncPromisePolling);
      uv_async_send(&baton->req);
      return;
    }
  }

    if (result.IsEmpty() || result->IsNativeError()) {
      baton->result = -1;
    }
    else if (!result->IsNull() && !result->IsUndefined()) {
       if (result->IsNumber()) {
        baton->result = (int)result->ToNumber()->Value();
      }
      else {
        baton->result = 1;
      }
     }
    else {
      baton->result = 1;
    }
 
  baton->done = true;
  uv_close((uv_handle_t*) &baton->req, NULL);
}

void GitIndex::RemoveAll_callback_asyncPromisePolling(uv_async_t* req, int status) {
  NanScope();

  RemoveAll_CallbackBaton* baton = static_cast<RemoveAll_CallbackBaton*>(req->data);
  Local<Object> promise = NanNew<Object>(baton->promise);
  NanCallback* isPendingFn = new NanCallback(promise->Get(NanNew("isPending")).As<Function>());
  Local<Value> argv[1]; // MSBUILD won't assign an array of length 0
  Local<Boolean> isPending = isPendingFn->Call(promise, 0, argv)->ToBoolean();

  if (isPending->Value()) {
    uv_async_send(&baton->req);
    return;
  }

  NanCallback* isFulfilledFn = new NanCallback(promise->Get(NanNew("isFulfilled")).As<Function>());
  Local<Boolean> isFulfilled = isFulfilledFn->Call(promise, 0, argv)->ToBoolean();

  if (isFulfilled->Value()) {
    NanCallback* resultFn = new NanCallback(promise->Get(NanNew("value")).As<Function>());
    Handle<v8::Value> result = resultFn->Call(promise, 0, argv);

      if (result.IsEmpty() || result->IsNativeError()) {
        baton->result = -1;
      }
      else if (!result->IsNull() && !result->IsUndefined()) {
         if (result->IsNumber()) {
          baton->result = (int)result->ToNumber()->Value();
        }
        else {
          baton->result = 1;
        }
       }
      else {
        baton->result = 1;
      }
     baton->done = true;
  }
  else {
    // promise was rejected
    baton->result = -1;
    baton->done = false;
  }

  uv_close((uv_handle_t*) &baton->req, NULL);
}
   
/*
   * @param String path
     * @return Number  result    */
NAN_METHOD(GitIndex::RemoveBypath) {
  NanEscapableScope();

  if (args.Length() == 0 || !args[0]->IsString()) {
    return NanThrowError("String path is required.");
  }

// start convert_from_v8 block
  const char * from_path;

  String::Utf8Value path(args[0]->ToString());
  from_path = (const char *) strdup(*path);
// end convert_from_v8 block
   int result = git_index_remove_bypath(
ObjectWrap::Unwrap<GitIndex>(args.This())->GetValue()
,from_path
  );

 
  Handle<v8::Value> to;
// start convert_to_v8 block
     to = NanNew<Number>( result);
  // end convert_to_v8 block
  NodeGitPsueodoNanReturnEscapingValue(to);
}
   
/*
   * @param String dir
   * @param Number stage
     * @return Number  result    */
NAN_METHOD(GitIndex::RemoveDirectory) {
  NanEscapableScope();

  if (args.Length() == 0 || !args[0]->IsString()) {
    return NanThrowError("String dir is required.");
  }

  if (args.Length() == 1 || !args[1]->IsNumber()) {
    return NanThrowError("Number stage is required.");
  }

// start convert_from_v8 block
  const char * from_dir;

  String::Utf8Value dir(args[0]->ToString());
  from_dir = (const char *) strdup(*dir);
// end convert_from_v8 block
// start convert_from_v8 block
  int from_stage;
  from_stage = (int)   args[1]->ToNumber()->Value();
// end convert_from_v8 block
   int result = git_index_remove_directory(
ObjectWrap::Unwrap<GitIndex>(args.This())->GetValue()
,from_dir
,from_stage
  );

 
  Handle<v8::Value> to;
// start convert_to_v8 block
     to = NanNew<Number>( result);
  // end convert_to_v8 block
  NodeGitPsueodoNanReturnEscapingValue(to);
}
   
/*
   * @param Number caps
     * @return Number  result    */
NAN_METHOD(GitIndex::SetCaps) {
  NanEscapableScope();

  if (args.Length() == 0 || !args[0]->IsNumber()) {
    return NanThrowError("Number caps is required.");
  }

// start convert_from_v8 block
  int from_caps;
  from_caps = (int)   args[0]->ToNumber()->Value();
// end convert_from_v8 block
   int result = git_index_set_caps(
ObjectWrap::Unwrap<GitIndex>(args.This())->GetValue()
,from_caps
  );

 
  Handle<v8::Value> to;
// start convert_to_v8 block
     to = NanNew<Number>( result);
  // end convert_to_v8 block
  NodeGitPsueodoNanReturnEscapingValue(to);
}
  
/*
   * @param Strarray pathspec
   * @param IndexMatchedPathCb callback
   * @param Void payload
     */
NAN_METHOD(GitIndex::UpdateAll) {
  NanScope();

  if (args.Length() == 3 || !args[3]->IsFunction()) {
    return NanThrowError("Callback is required and must be a Function.");
  }

  UpdateAllBaton* baton = new UpdateAllBaton;

  baton->error_code = GIT_OK;
  baton->error = NULL;

  UpdateAll_globalPayload* globalPayload = new UpdateAll_globalPayload;
  baton->index = ObjectWrap::Unwrap<GitIndex>(args.This())->GetValue();
// start convert_from_v8 block
  const git_strarray * from_pathspec;

  from_pathspec = StrArrayConverter::Convert(args[0]);
// end convert_from_v8 block
  baton->pathspec = from_pathspec;
  if (!args[1]->IsFunction()) {
    baton->callback = NULL;
    globalPayload->callback = NULL;
  }
  else {
    baton->callback = UpdateAll_callback_cppCallback;
    globalPayload->callback = new NanCallback(args[1].As<Function>());
  }
  baton->payload = globalPayload;

  NanCallback *callback = new NanCallback(Local<Function>::Cast(args[3]));
  UpdateAllWorker *worker = new UpdateAllWorker(baton, callback);
  worker->SaveToPersistent("index", args.This());
  if (!args[0]->IsUndefined() && !args[0]->IsNull())
    worker->SaveToPersistent("pathspec", args[0]->ToObject());
  if (!args[2]->IsUndefined() && !args[2]->IsNull())
    worker->SaveToPersistent("payload", args[2]->ToObject());

  NanAsyncQueueWorker(worker);
  NanReturnUndefined();
}

void GitIndex::UpdateAllWorker::Execute() {
  int result = git_index_update_all(
baton->index,baton->pathspec,baton->callback,baton->payload    );

  baton->error_code = result;

  if (result != GIT_OK && giterr_last() != NULL) {
    baton->error = git_error_dup(giterr_last());
  }

}

void GitIndex::UpdateAllWorker::HandleOKCallback() {
  TryCatch try_catch;

  if (baton->error_code == GIT_OK) {
    Handle<v8::Value> result = NanUndefined();
    Handle<v8::Value> argv[2] = {
      NanNull(),
      result
    };
    callback->Call(2, argv);
  } else {
    if (baton->error) {
      Handle<v8::Value> argv[1] = {
        NanError(baton->error->message)
      };
      callback->Call(1, argv);
      if (baton->error->message)
        free((void *)baton->error->message);
      free((void *)baton->error);
    } else {
      callback->Call(0, NULL);
    }

  }

  if (try_catch.HasCaught()) {
    node::FatalException(try_catch);
  }

  delete (UpdateAll_globalPayload*)baton->payload;

  delete baton;
}


int GitIndex::UpdateAll_callback_cppCallback (
    const char * path,     const char * matched_pathspec,     void * payload  ) {
  UpdateAll_CallbackBaton* baton = new UpdateAll_CallbackBaton();

    baton->path = path;
    baton->matched_pathspec = matched_pathspec;
    baton->payload = payload;
 
  baton->result = 0;
  baton->req.data = baton;
  baton->done = false;

  uv_async_init(uv_default_loop(), &baton->req, (uv_async_cb) UpdateAll_callback_async);
  uv_async_send(&baton->req);

  while(!baton->done) {
    this_thread::sleep_for(chrono::milliseconds(1));
  }

  
  return baton->result;
}

void GitIndex::UpdateAll_callback_async(uv_async_t* req, int status) {
  NanScope();

  UpdateAll_CallbackBaton* baton = static_cast<UpdateAll_CallbackBaton*>(req->data);

    NanCallback* callback = ((UpdateAll_globalPayload*)baton->payload)->callback;
   
  Local<Value> argv[3] = {
           NanNew(baton->path),
             NanNew(baton->matched_pathspec),
          // payload is null because we can use closure scope in javascript
        NanUndefined()
    };

  TryCatch tryCatch;
  Handle<v8::Value> result = callback->Call(3, argv);

  if (result->IsObject() && result->ToObject()->Has(NanNew("then"))) {
    Handle<v8::Value> thenProp = result->ToObject()->Get(NanNew("then"));

    if (thenProp->IsFunction()) {
      // we can be reasonbly certain that the result is a promise
      Local<Object> promise = result->ToObject();

      NanAssignPersistent(baton->promise, promise);

      uv_close((uv_handle_t*) &baton->req, NULL);
      uv_async_init(uv_default_loop(), &baton->req, (uv_async_cb) UpdateAll_callback_asyncPromisePolling);
      uv_async_send(&baton->req);
      return;
    }
  }

    if (result.IsEmpty() || result->IsNativeError()) {
      baton->result = -1;
    }
    else if (!result->IsNull() && !result->IsUndefined()) {
       if (result->IsNumber()) {
        baton->result = (int)result->ToNumber()->Value();
      }
      else {
        baton->result = 1;
      }
     }
    else {
      baton->result = 1;
    }
 
  baton->done = true;
  uv_close((uv_handle_t*) &baton->req, NULL);
}

void GitIndex::UpdateAll_callback_asyncPromisePolling(uv_async_t* req, int status) {
  NanScope();

  UpdateAll_CallbackBaton* baton = static_cast<UpdateAll_CallbackBaton*>(req->data);
  Local<Object> promise = NanNew<Object>(baton->promise);
  NanCallback* isPendingFn = new NanCallback(promise->Get(NanNew("isPending")).As<Function>());
  Local<Value> argv[1]; // MSBUILD won't assign an array of length 0
  Local<Boolean> isPending = isPendingFn->Call(promise, 0, argv)->ToBoolean();

  if (isPending->Value()) {
    uv_async_send(&baton->req);
    return;
  }

  NanCallback* isFulfilledFn = new NanCallback(promise->Get(NanNew("isFulfilled")).As<Function>());
  Local<Boolean> isFulfilled = isFulfilledFn->Call(promise, 0, argv)->ToBoolean();

  if (isFulfilled->Value()) {
    NanCallback* resultFn = new NanCallback(promise->Get(NanNew("value")).As<Function>());
    Handle<v8::Value> result = resultFn->Call(promise, 0, argv);

      if (result.IsEmpty() || result->IsNativeError()) {
        baton->result = -1;
      }
      else if (!result->IsNull() && !result->IsUndefined()) {
         if (result->IsNumber()) {
          baton->result = (int)result->ToNumber()->Value();
        }
        else {
          baton->result = 1;
        }
       }
      else {
        baton->result = 1;
      }
     baton->done = true;
  }
  else {
    // promise was rejected
    baton->result = -1;
    baton->done = false;
  }

  uv_close((uv_handle_t*) &baton->req, NULL);
}
   
/*
     * @return Number  result    */
NAN_METHOD(GitIndex::Write) {
  NanEscapableScope();

   int result = git_index_write(
ObjectWrap::Unwrap<GitIndex>(args.This())->GetValue()
  );

 
  Handle<v8::Value> to;
// start convert_to_v8 block
     to = NanNew<Number>( result);
  // end convert_to_v8 block
  NodeGitPsueodoNanReturnEscapingValue(to);
}
  
/*
     * @param Oid callback
   */
NAN_METHOD(GitIndex::WriteTree) {
  NanScope();

  if (args.Length() == 0 || !args[0]->IsFunction()) {
    return NanThrowError("Callback is required and must be a Function.");
  }

  WriteTreeBaton* baton = new WriteTreeBaton;

  baton->error_code = GIT_OK;
  baton->error = NULL;

  baton->out = (git_oid *)malloc(sizeof(git_oid ));
  baton->index = ObjectWrap::Unwrap<GitIndex>(args.This())->GetValue();

  NanCallback *callback = new NanCallback(Local<Function>::Cast(args[0]));
  WriteTreeWorker *worker = new WriteTreeWorker(baton, callback);
  worker->SaveToPersistent("index", args.This());

  NanAsyncQueueWorker(worker);
  NanReturnUndefined();
}

void GitIndex::WriteTreeWorker::Execute() {
  int result = git_index_write_tree(
baton->out,baton->index    );

  baton->error_code = result;

  if (result != GIT_OK && giterr_last() != NULL) {
    baton->error = git_error_dup(giterr_last());
  }

}

void GitIndex::WriteTreeWorker::HandleOKCallback() {
  TryCatch try_catch;

  if (baton->error_code == GIT_OK) {
    Handle<v8::Value> to;
// start convert_to_v8 block
  
  if (baton->out != NULL) {
    // GitOid baton->out
       to = GitOid::New((void *)baton->out, false);
   }
  else {
    to = NanNull();
  }

 // end convert_to_v8 block
    Handle<v8::Value> result = to;
    Handle<v8::Value> argv[2] = {
      NanNull(),
      result
    };
    callback->Call(2, argv);
  } else {
    if (baton->error) {
      Handle<v8::Value> argv[1] = {
        NanError(baton->error->message)
      };
      callback->Call(1, argv);
      if (baton->error->message)
        free((void *)baton->error->message);
      free((void *)baton->error);
    } else {
      callback->Call(0, NULL);
    }

  }

  if (try_catch.HasCaught()) {
    node::FatalException(try_catch);
  }


  delete baton;
}

  
/*
    * @param Repository repo
    * @param Oid callback
   */
NAN_METHOD(GitIndex::WriteTreeTo) {
  NanScope();

  if (args.Length() == 0 || !args[0]->IsObject()) {
    return NanThrowError("Repository repo is required.");
  }

  if (args.Length() == 1 || !args[1]->IsFunction()) {
    return NanThrowError("Callback is required and must be a Function.");
  }

  WriteTreeToBaton* baton = new WriteTreeToBaton;

  baton->error_code = GIT_OK;
  baton->error = NULL;

  baton->out = (git_oid *)malloc(sizeof(git_oid ));
  baton->index = ObjectWrap::Unwrap<GitIndex>(args.This())->GetValue();
// start convert_from_v8 block
  git_repository * from_repo;
  from_repo = ObjectWrap::Unwrap<GitRepository>(args[0]->ToObject())->GetValue();
// end convert_from_v8 block
  baton->repo = from_repo;

  NanCallback *callback = new NanCallback(Local<Function>::Cast(args[1]));
  WriteTreeToWorker *worker = new WriteTreeToWorker(baton, callback);
  worker->SaveToPersistent("index", args.This());
  if (!args[0]->IsUndefined() && !args[0]->IsNull())
    worker->SaveToPersistent("repo", args[0]->ToObject());

  NanAsyncQueueWorker(worker);
  NanReturnUndefined();
}

void GitIndex::WriteTreeToWorker::Execute() {
  int result = git_index_write_tree_to(
baton->out,baton->index,baton->repo    );

  baton->error_code = result;

  if (result != GIT_OK && giterr_last() != NULL) {
    baton->error = git_error_dup(giterr_last());
  }

}

void GitIndex::WriteTreeToWorker::HandleOKCallback() {
  TryCatch try_catch;

  if (baton->error_code == GIT_OK) {
    Handle<v8::Value> to;
// start convert_to_v8 block
  
  if (baton->out != NULL) {
    // GitOid baton->out
       to = GitOid::New((void *)baton->out, false);
   }
  else {
    to = NanNull();
  }

 // end convert_to_v8 block
    Handle<v8::Value> result = to;
    Handle<v8::Value> argv[2] = {
      NanNull(),
      result
    };
    callback->Call(2, argv);
  } else {
    if (baton->error) {
      Handle<v8::Value> argv[1] = {
        NanError(baton->error->message)
      };
      callback->Call(1, argv);
      if (baton->error->message)
        free((void *)baton->error->message);
      free((void *)baton->error);
    } else {
      callback->Call(0, NULL);
    }

  }

  if (try_catch.HasCaught()) {
    node::FatalException(try_catch);
  }


  delete baton;
}

      Persistent<Function> GitIndex::constructor_template;
 