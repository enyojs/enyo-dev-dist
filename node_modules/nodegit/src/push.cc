// This is a generated file, modify: generate/templates/class_content.cc.
#include <nan.h>
#include <string.h>
#include <chrono>
#include <thread>

extern "C" {
  #include <git2.h>
 }

#include "../include/functions/copy.h"
#include "../include/macros.h"
#include "../include/push.h"

  #include "../include/push_options.h"
 
#include <iostream>

using namespace std;
using namespace v8;
using namespace node;

  GitPush::GitPush(git_push *raw, bool selfFreeing) {
    this->raw = raw;
    this->selfFreeing = selfFreeing;
  }

  GitPush::~GitPush() {
 
    // this will cause an error if you have a non-self-freeing object that also needs
    // to save values. Since the object that will eventually free the object has no
    // way of knowing to free these values.
     
  }

  void GitPush::InitializeComponent(Handle<v8::Object> target) {
    NanScope();

    Local<FunctionTemplate> tpl = NanNew<FunctionTemplate>(JSNewFunction);

    tpl->InstanceTemplate()->SetInternalFieldCount(1);
    tpl->SetClassName(NanNew<String>("Push"));

           NODE_SET_METHOD(tpl, "initOptions", InitOptions);
    
    Local<Function> _constructor_template = tpl->GetFunction();
    NanAssignPersistent(constructor_template, _constructor_template);
    target->Set(NanNew<String>("Push"), _constructor_template);
  }

  NAN_METHOD(GitPush::JSNewFunction) {
    NanScope();

    if (args.Length() == 0 || !args[0]->IsExternal()) {
         return NanThrowError("A new GitPush cannot be instantiated.");
     }

    GitPush* object = new GitPush(static_cast<git_push *>(Handle<External>::Cast(args[0])->Value()), args[1]->BooleanValue());
    object->Wrap(args.This());

    NanReturnValue(args.This());
  }

  Handle<v8::Value> GitPush::New(void *raw, bool selfFreeing) {
    NanEscapableScope();
    Handle<v8::Value> argv[2] = { NanNew<External>((void *)raw), NanNew<Boolean>(selfFreeing) };
    return NanEscapeScope(NanNew<Function>(GitPush::constructor_template)->NewInstance(2, argv));
  }

  git_push *GitPush::GetValue() {
    return this->raw;
  }

  git_push **GitPush::GetRefValue() {
    return this->raw == NULL ? NULL : &this->raw;
  }

  void GitPush::ClearValue() {
    this->raw = NULL;
  }

  
/*
 * @param PushOptions opts
   * @param Number version
     * @return Number  result    */
NAN_METHOD(GitPush::InitOptions) {
  NanEscapableScope();

  if (args.Length() == 0 || !args[0]->IsObject()) {
    return NanThrowError("PushOptions opts is required.");
  }

  if (args.Length() == 1 || !args[1]->IsNumber()) {
    return NanThrowError("Number version is required.");
  }

// start convert_from_v8 block
  git_push_options * from_opts;
  from_opts = ObjectWrap::Unwrap<GitPushOptions>(args[0]->ToObject())->GetValue();
// end convert_from_v8 block
// start convert_from_v8 block
  unsigned int from_version;
  from_version = (unsigned int)   args[1]->ToNumber()->Value();
// end convert_from_v8 block
   int result = git_push_init_options(
from_opts
,from_version
  );

 
  Handle<v8::Value> to;
// start convert_to_v8 block
     to = NanNew<Number>( result);
  // end convert_to_v8 block
  NodeGitPsueodoNanReturnEscapingValue(to);
}
      Persistent<Function> GitPush::constructor_template;
 