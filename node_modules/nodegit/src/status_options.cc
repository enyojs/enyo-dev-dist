// This is a generated file, modify: generate/templates/struct_content.cc.
#include <nan.h>
#include <string.h>
#include <chrono>
#include <thread>

extern "C" {
  #include <git2.h>
 }

#include <iostream>
#include "../include/functions/copy.h"
#include "../include/status_options.h"

  #include "../include/strarray.h"
 
using namespace v8;
using namespace node;
using namespace std;


// generated from struct_content.cc
GitStatusOptions::GitStatusOptions() {
   git_status_options wrappedValue = GIT_STATUS_OPTIONS_INIT;
   this->raw = (git_status_options*) malloc(sizeof(git_status_options));
  memcpy(this->raw, &wrappedValue, sizeof(git_status_options));

  this->ConstructFields();
  this->selfFreeing = true;
}

GitStatusOptions::GitStatusOptions(git_status_options* raw, bool selfFreeing) {
  this->raw = raw;
  this->ConstructFields();
  this->selfFreeing = selfFreeing;
}

GitStatusOptions::~GitStatusOptions() {
           
  if (this->selfFreeing) {
    free(this->raw);
  }
}

void GitStatusOptions::ConstructFields() {
                 Local<Object> pathspecTemp = GitStrarray::New(
            &this->raw->pathspec,
            false
          )->ToObject();
          NanAssignPersistent(this->pathspec, pathspecTemp);

    }

void GitStatusOptions::InitializeComponent(Handle<v8::Object> target) {
  NanScope();

  Local<FunctionTemplate> tpl = NanNew<FunctionTemplate>(JSNewFunction);

  tpl->InstanceTemplate()->SetInternalFieldCount(1);
  tpl->SetClassName(NanNew<String>("StatusOptions"));

      tpl->InstanceTemplate()->SetAccessor(NanNew<String>("version"), GetVersion, SetVersion);
        tpl->InstanceTemplate()->SetAccessor(NanNew<String>("show"), GetShow, SetShow);
        tpl->InstanceTemplate()->SetAccessor(NanNew<String>("flags"), GetFlags, SetFlags);
        tpl->InstanceTemplate()->SetAccessor(NanNew<String>("pathspec"), GetPathspec, SetPathspec);
   
  Local<Function> _constructor_template = tpl->GetFunction();
  NanAssignPersistent(constructor_template, _constructor_template);
  target->Set(NanNew<String>("StatusOptions"), _constructor_template);
}

NAN_METHOD(GitStatusOptions::JSNewFunction) {
  NanScope();
  GitStatusOptions* instance;

  if (args.Length() == 0 || !args[0]->IsExternal()) {
    instance = new GitStatusOptions();
  }
  else {
    instance = new GitStatusOptions(static_cast<git_status_options*>(Handle<External>::Cast(args[0])->Value()), args[1]->BooleanValue());
  }

  instance->Wrap(args.This());

  NanReturnValue(args.This());
}

Handle<v8::Value> GitStatusOptions::New(void* raw, bool selfFreeing) {
  NanEscapableScope();

  Handle<v8::Value> argv[2] = { NanNew<External>((void *)raw), NanNew<Boolean>(selfFreeing) };
  return NanEscapeScope(NanNew<Function>(GitStatusOptions::constructor_template)->NewInstance(2, argv));
}

git_status_options *GitStatusOptions::GetValue() {
  return this->raw;
}

git_status_options **GitStatusOptions::GetRefValue() {
  return this->raw == NULL ? NULL : &this->raw;
}

void GitStatusOptions::ClearValue() {
  this->raw = NULL;
}

    NAN_GETTER(GitStatusOptions::GetVersion) {
      NanScope();

      GitStatusOptions *wrapper = ObjectWrap::Unwrap<GitStatusOptions>(args.This());

        NanReturnValue(NanNew<Number>(wrapper->GetValue()->version));
     }

    NAN_SETTER(GitStatusOptions::SetVersion) {
      NanScope();

      GitStatusOptions *wrapper = ObjectWrap::Unwrap<GitStatusOptions>(args.This());

         if (value->IsNumber()) {
          wrapper->GetValue()->version = (unsigned int) value->Int32Value();
        }
     }

      NAN_GETTER(GitStatusOptions::GetShow) {
      NanScope();

      GitStatusOptions *wrapper = ObjectWrap::Unwrap<GitStatusOptions>(args.This());

        NanReturnValue(NanNew((int)wrapper->GetValue()->show));

     }

    NAN_SETTER(GitStatusOptions::SetShow) {
      NanScope();

      GitStatusOptions *wrapper = ObjectWrap::Unwrap<GitStatusOptions>(args.This());

        if (value->IsNumber()) {
          wrapper->GetValue()->show = (git_status_show_t) value->Int32Value();
        }

     }

      NAN_GETTER(GitStatusOptions::GetFlags) {
      NanScope();

      GitStatusOptions *wrapper = ObjectWrap::Unwrap<GitStatusOptions>(args.This());

        NanReturnValue(NanNew((int)wrapper->GetValue()->flags));

     }

    NAN_SETTER(GitStatusOptions::SetFlags) {
      NanScope();

      GitStatusOptions *wrapper = ObjectWrap::Unwrap<GitStatusOptions>(args.This());

        if (value->IsNumber()) {
          wrapper->GetValue()->flags = (git_status_opt_t) value->Int32Value();
        }

     }

      NAN_GETTER(GitStatusOptions::GetPathspec) {
      NanScope();

      GitStatusOptions *wrapper = ObjectWrap::Unwrap<GitStatusOptions>(args.This());

        NanReturnValue(NanNew(wrapper->pathspec));

     }

    NAN_SETTER(GitStatusOptions::SetPathspec) {
      NanScope();

      GitStatusOptions *wrapper = ObjectWrap::Unwrap<GitStatusOptions>(args.This());

        Handle<Object> pathspec(value->ToObject());
        NanDisposePersistent(wrapper->pathspec);

        NanAssignPersistent(wrapper->pathspec, pathspec);

        wrapper->raw->pathspec = * StrArrayConverter::Convert(pathspec->ToObject()) ;

     }

   
Persistent<Function> GitStatusOptions::constructor_template;
