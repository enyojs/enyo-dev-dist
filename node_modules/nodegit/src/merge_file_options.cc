// This is a generated file, modify: generate/templates/struct_content.cc.
#include <nan.h>
#include <string.h>
#include <chrono>
#include <thread>

extern "C" {
  #include <git2.h>
 }

#include <iostream>
#include "../include/functions/copy.h"
#include "../include/merge_file_options.h"

 
using namespace v8;
using namespace node;
using namespace std;


// generated from struct_content.cc
GitMergeFileOptions::GitMergeFileOptions() {
   git_merge_file_options wrappedValue = GIT_MERGE_FILE_OPTIONS_INIT;
   this->raw = (git_merge_file_options*) malloc(sizeof(git_merge_file_options));
  memcpy(this->raw, &wrappedValue, sizeof(git_merge_file_options));

  this->ConstructFields();
  this->selfFreeing = true;
}

GitMergeFileOptions::GitMergeFileOptions(git_merge_file_options* raw, bool selfFreeing) {
  this->raw = raw;
  this->ConstructFields();
  this->selfFreeing = selfFreeing;
}

GitMergeFileOptions::~GitMergeFileOptions() {
                 
  if (this->selfFreeing) {
    free(this->raw);
  }
}

void GitMergeFileOptions::ConstructFields() {
                 }

void GitMergeFileOptions::InitializeComponent(Handle<v8::Object> target) {
  NanScope();

  Local<FunctionTemplate> tpl = NanNew<FunctionTemplate>(JSNewFunction);

  tpl->InstanceTemplate()->SetInternalFieldCount(1);
  tpl->SetClassName(NanNew<String>("MergeFileOptions"));

      tpl->InstanceTemplate()->SetAccessor(NanNew<String>("version"), GetVersion, SetVersion);
        tpl->InstanceTemplate()->SetAccessor(NanNew<String>("ancestorLabel"), GetAncestorLabel, SetAncestorLabel);
        tpl->InstanceTemplate()->SetAccessor(NanNew<String>("ourLabel"), GetOurLabel, SetOurLabel);
        tpl->InstanceTemplate()->SetAccessor(NanNew<String>("theirLabel"), GetTheirLabel, SetTheirLabel);
        tpl->InstanceTemplate()->SetAccessor(NanNew<String>("favor"), GetFavor, SetFavor);
        tpl->InstanceTemplate()->SetAccessor(NanNew<String>("flags"), GetFlags, SetFlags);
   
  Local<Function> _constructor_template = tpl->GetFunction();
  NanAssignPersistent(constructor_template, _constructor_template);
  target->Set(NanNew<String>("MergeFileOptions"), _constructor_template);
}

NAN_METHOD(GitMergeFileOptions::JSNewFunction) {
  NanScope();
  GitMergeFileOptions* instance;

  if (args.Length() == 0 || !args[0]->IsExternal()) {
    instance = new GitMergeFileOptions();
  }
  else {
    instance = new GitMergeFileOptions(static_cast<git_merge_file_options*>(Handle<External>::Cast(args[0])->Value()), args[1]->BooleanValue());
  }

  instance->Wrap(args.This());

  NanReturnValue(args.This());
}

Handle<v8::Value> GitMergeFileOptions::New(void* raw, bool selfFreeing) {
  NanEscapableScope();

  Handle<v8::Value> argv[2] = { NanNew<External>((void *)raw), NanNew<Boolean>(selfFreeing) };
  return NanEscapeScope(NanNew<Function>(GitMergeFileOptions::constructor_template)->NewInstance(2, argv));
}

git_merge_file_options *GitMergeFileOptions::GetValue() {
  return this->raw;
}

git_merge_file_options **GitMergeFileOptions::GetRefValue() {
  return this->raw == NULL ? NULL : &this->raw;
}

void GitMergeFileOptions::ClearValue() {
  this->raw = NULL;
}

    NAN_GETTER(GitMergeFileOptions::GetVersion) {
      NanScope();

      GitMergeFileOptions *wrapper = ObjectWrap::Unwrap<GitMergeFileOptions>(args.This());

        NanReturnValue(NanNew<Number>(wrapper->GetValue()->version));
     }

    NAN_SETTER(GitMergeFileOptions::SetVersion) {
      NanScope();

      GitMergeFileOptions *wrapper = ObjectWrap::Unwrap<GitMergeFileOptions>(args.This());

         if (value->IsNumber()) {
          wrapper->GetValue()->version = (unsigned int) value->Int32Value();
        }
     }

      NAN_GETTER(GitMergeFileOptions::GetAncestorLabel) {
      NanScope();

      GitMergeFileOptions *wrapper = ObjectWrap::Unwrap<GitMergeFileOptions>(args.This());

        if (wrapper->GetValue()->ancestor_label) {
          NanReturnValue(NanNew<String>(wrapper->GetValue()->ancestor_label));
        }
        else {
          NanReturnUndefined();
        }

     }

    NAN_SETTER(GitMergeFileOptions::SetAncestorLabel) {
      NanScope();

      GitMergeFileOptions *wrapper = ObjectWrap::Unwrap<GitMergeFileOptions>(args.This());

        if (wrapper->GetValue()->ancestor_label) {
        }

        String::Utf8Value str(value);
        wrapper->GetValue()->ancestor_label = strdup(*str);

     }

      NAN_GETTER(GitMergeFileOptions::GetOurLabel) {
      NanScope();

      GitMergeFileOptions *wrapper = ObjectWrap::Unwrap<GitMergeFileOptions>(args.This());

        if (wrapper->GetValue()->our_label) {
          NanReturnValue(NanNew<String>(wrapper->GetValue()->our_label));
        }
        else {
          NanReturnUndefined();
        }

     }

    NAN_SETTER(GitMergeFileOptions::SetOurLabel) {
      NanScope();

      GitMergeFileOptions *wrapper = ObjectWrap::Unwrap<GitMergeFileOptions>(args.This());

        if (wrapper->GetValue()->our_label) {
        }

        String::Utf8Value str(value);
        wrapper->GetValue()->our_label = strdup(*str);

     }

      NAN_GETTER(GitMergeFileOptions::GetTheirLabel) {
      NanScope();

      GitMergeFileOptions *wrapper = ObjectWrap::Unwrap<GitMergeFileOptions>(args.This());

        if (wrapper->GetValue()->their_label) {
          NanReturnValue(NanNew<String>(wrapper->GetValue()->their_label));
        }
        else {
          NanReturnUndefined();
        }

     }

    NAN_SETTER(GitMergeFileOptions::SetTheirLabel) {
      NanScope();

      GitMergeFileOptions *wrapper = ObjectWrap::Unwrap<GitMergeFileOptions>(args.This());

        if (wrapper->GetValue()->their_label) {
        }

        String::Utf8Value str(value);
        wrapper->GetValue()->their_label = strdup(*str);

     }

      NAN_GETTER(GitMergeFileOptions::GetFavor) {
      NanScope();

      GitMergeFileOptions *wrapper = ObjectWrap::Unwrap<GitMergeFileOptions>(args.This());

        NanReturnValue(NanNew((int)wrapper->GetValue()->favor));

     }

    NAN_SETTER(GitMergeFileOptions::SetFavor) {
      NanScope();

      GitMergeFileOptions *wrapper = ObjectWrap::Unwrap<GitMergeFileOptions>(args.This());

        if (value->IsNumber()) {
          wrapper->GetValue()->favor = (git_merge_file_favor_t) value->Int32Value();
        }

     }

      NAN_GETTER(GitMergeFileOptions::GetFlags) {
      NanScope();

      GitMergeFileOptions *wrapper = ObjectWrap::Unwrap<GitMergeFileOptions>(args.This());

        NanReturnValue(NanNew((int)wrapper->GetValue()->flags));

     }

    NAN_SETTER(GitMergeFileOptions::SetFlags) {
      NanScope();

      GitMergeFileOptions *wrapper = ObjectWrap::Unwrap<GitMergeFileOptions>(args.This());

        if (value->IsNumber()) {
          wrapper->GetValue()->flags = (git_merge_file_flags_t) value->Int32Value();
        }

     }

   
Persistent<Function> GitMergeFileOptions::constructor_template;
