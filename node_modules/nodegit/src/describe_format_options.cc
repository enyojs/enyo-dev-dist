// This is a generated file, modify: generate/templates/class_content.cc.
#include <nan.h>
#include <string.h>
#include <chrono>
#include <thread>

extern "C" {
  #include <git2.h>
 }

#include "../include/functions/copy.h"
#include "../include/macros.h"
#include "../include/describe_format_options.h"

 
#include <iostream>

using namespace std;
using namespace v8;
using namespace node;

  GitDescribeFormatOptions::GitDescribeFormatOptions(git_describe_format_options *raw, bool selfFreeing) {
    this->raw = raw;
    this->selfFreeing = selfFreeing;
  }

  GitDescribeFormatOptions::~GitDescribeFormatOptions() {
 
    // this will cause an error if you have a non-self-freeing object that also needs
    // to save values. Since the object that will eventually free the object has no
    // way of knowing to free these values.
 
  }

  void GitDescribeFormatOptions::InitializeComponent(Handle<v8::Object> target) {
    NanScope();

    Local<FunctionTemplate> tpl = NanNew<FunctionTemplate>(JSNewFunction);

    tpl->InstanceTemplate()->SetInternalFieldCount(1);
    tpl->SetClassName(NanNew<String>("DescribeFormatOptions"));

         NODE_SET_PROTOTYPE_METHOD(tpl, "version", Version);
         NODE_SET_PROTOTYPE_METHOD(tpl, "abbreviatedSize", AbbreviatedSize);
         NODE_SET_PROTOTYPE_METHOD(tpl, "alwaysUseLongFormat", AlwaysUseLongFormat);
         NODE_SET_PROTOTYPE_METHOD(tpl, "dirtySuffix", DirtySuffix);
  
    Local<Function> _constructor_template = tpl->GetFunction();
    NanAssignPersistent(constructor_template, _constructor_template);
    target->Set(NanNew<String>("DescribeFormatOptions"), _constructor_template);
  }

  NAN_METHOD(GitDescribeFormatOptions::JSNewFunction) {
    NanScope();

    if (args.Length() == 0 || !args[0]->IsExternal()) {
         return NanThrowError("A new GitDescribeFormatOptions cannot be instantiated.");
     }

    GitDescribeFormatOptions* object = new GitDescribeFormatOptions(static_cast<git_describe_format_options *>(Handle<External>::Cast(args[0])->Value()), args[1]->BooleanValue());
    object->Wrap(args.This());

    NanReturnValue(args.This());
  }

  Handle<v8::Value> GitDescribeFormatOptions::New(void *raw, bool selfFreeing) {
    NanEscapableScope();
    Handle<v8::Value> argv[2] = { NanNew<External>((void *)raw), NanNew<Boolean>(selfFreeing) };
    return NanEscapeScope(NanNew<Function>(GitDescribeFormatOptions::constructor_template)->NewInstance(2, argv));
  }

  git_describe_format_options *GitDescribeFormatOptions::GetValue() {
    return this->raw;
  }

  git_describe_format_options **GitDescribeFormatOptions::GetRefValue() {
    return this->raw == NULL ? NULL : &this->raw;
  }

  void GitDescribeFormatOptions::ClearValue() {
    this->raw = NULL;
  }

      NAN_METHOD(GitDescribeFormatOptions::Version) {
      NanScope();
      Handle<v8::Value> to;

       unsigned int
         version =
         ObjectWrap::Unwrap<GitDescribeFormatOptions>(args.This())->GetValue()->version;
 // start convert_to_v8 block
     to = NanNew<Number>( version);
  // end convert_to_v8 block
      NanReturnValue(to);
    }
     NAN_METHOD(GitDescribeFormatOptions::AbbreviatedSize) {
      NanScope();
      Handle<v8::Value> to;

       unsigned int
         abbreviated_size =
         ObjectWrap::Unwrap<GitDescribeFormatOptions>(args.This())->GetValue()->abbreviated_size;
 // start convert_to_v8 block
     to = NanNew<Number>( abbreviated_size);
  // end convert_to_v8 block
      NanReturnValue(to);
    }
     NAN_METHOD(GitDescribeFormatOptions::AlwaysUseLongFormat) {
      NanScope();
      Handle<v8::Value> to;

       int
         always_use_long_format =
         ObjectWrap::Unwrap<GitDescribeFormatOptions>(args.This())->GetValue()->always_use_long_format;
 // start convert_to_v8 block
     to = NanNew<Number>( always_use_long_format);
  // end convert_to_v8 block
      NanReturnValue(to);
    }
     NAN_METHOD(GitDescribeFormatOptions::DirtySuffix) {
      NanScope();
      Handle<v8::Value> to;

       char *
         dirty_suffix =
         ObjectWrap::Unwrap<GitDescribeFormatOptions>(args.This())->GetValue()->dirty_suffix;
 // start convert_to_v8 block
  if (dirty_suffix){
       to = NanNew<String>(dirty_suffix);
   }
  else {
    to = NanNull();
  }

  // end convert_to_v8 block
      NanReturnValue(to);
    }
    Persistent<Function> GitDescribeFormatOptions::constructor_template;
 