// This is a generated file, modify: generate/templates/class_content.cc.
#include <nan.h>
#include <string.h>
#include <chrono>
#include <thread>

extern "C" {
  #include <git2.h>
 }

#include "../include/functions/copy.h"
#include "../include/macros.h"
#include "../include/submodule_update_options.h"

  #include "../include/checkout_options.h"
  #include "../include/remote_callbacks.h"
  #include "../include/signature.h"
 
#include <iostream>

using namespace std;
using namespace v8;
using namespace node;

  GitSubmoduleUpdateOptions::GitSubmoduleUpdateOptions(git_submodule_update_options *raw, bool selfFreeing) {
    this->raw = raw;
    this->selfFreeing = selfFreeing;
  }

  GitSubmoduleUpdateOptions::~GitSubmoduleUpdateOptions() {
 
    // this will cause an error if you have a non-self-freeing object that also needs
    // to save values. Since the object that will eventually free the object has no
    // way of knowing to free these values.
 
  }

  void GitSubmoduleUpdateOptions::InitializeComponent(Handle<v8::Object> target) {
    NanScope();

    Local<FunctionTemplate> tpl = NanNew<FunctionTemplate>(JSNewFunction);

    tpl->InstanceTemplate()->SetInternalFieldCount(1);
    tpl->SetClassName(NanNew<String>("SubmoduleUpdateOptions"));

         NODE_SET_PROTOTYPE_METHOD(tpl, "version", Version);
         NODE_SET_PROTOTYPE_METHOD(tpl, "checkoutOpts", CheckoutOpts);
         NODE_SET_PROTOTYPE_METHOD(tpl, "remoteCallbacks", RemoteCallbacks);
         NODE_SET_PROTOTYPE_METHOD(tpl, "cloneCheckoutStrategy", CloneCheckoutStrategy);
         NODE_SET_PROTOTYPE_METHOD(tpl, "signature", Signature);
  
    Local<Function> _constructor_template = tpl->GetFunction();
    NanAssignPersistent(constructor_template, _constructor_template);
    target->Set(NanNew<String>("SubmoduleUpdateOptions"), _constructor_template);
  }

  NAN_METHOD(GitSubmoduleUpdateOptions::JSNewFunction) {
    NanScope();

    if (args.Length() == 0 || !args[0]->IsExternal()) {
         return NanThrowError("A new GitSubmoduleUpdateOptions cannot be instantiated.");
     }

    GitSubmoduleUpdateOptions* object = new GitSubmoduleUpdateOptions(static_cast<git_submodule_update_options *>(Handle<External>::Cast(args[0])->Value()), args[1]->BooleanValue());
    object->Wrap(args.This());

    NanReturnValue(args.This());
  }

  Handle<v8::Value> GitSubmoduleUpdateOptions::New(void *raw, bool selfFreeing) {
    NanEscapableScope();
    Handle<v8::Value> argv[2] = { NanNew<External>((void *)raw), NanNew<Boolean>(selfFreeing) };
    return NanEscapeScope(NanNew<Function>(GitSubmoduleUpdateOptions::constructor_template)->NewInstance(2, argv));
  }

  git_submodule_update_options *GitSubmoduleUpdateOptions::GetValue() {
    return this->raw;
  }

  git_submodule_update_options **GitSubmoduleUpdateOptions::GetRefValue() {
    return this->raw == NULL ? NULL : &this->raw;
  }

  void GitSubmoduleUpdateOptions::ClearValue() {
    this->raw = NULL;
  }

      NAN_METHOD(GitSubmoduleUpdateOptions::Version) {
      NanScope();
      Handle<v8::Value> to;

       unsigned int
         version =
         ObjectWrap::Unwrap<GitSubmoduleUpdateOptions>(args.This())->GetValue()->version;
 // start convert_to_v8 block
     to = NanNew<Number>( version);
  // end convert_to_v8 block
      NanReturnValue(to);
    }
     NAN_METHOD(GitSubmoduleUpdateOptions::CheckoutOpts) {
      NanScope();
      Handle<v8::Value> to;

       git_checkout_options
        *
          checkout_opts =
        &
          ObjectWrap::Unwrap<GitSubmoduleUpdateOptions>(args.This())->GetValue()->checkout_opts;
 // start convert_to_v8 block
  
  if (checkout_opts != NULL) {
    // GitCheckoutOptions checkout_opts
       to = GitCheckoutOptions::New((void *)checkout_opts, false);
   }
  else {
    to = NanNull();
  }

 // end convert_to_v8 block
      NanReturnValue(to);
    }
     NAN_METHOD(GitSubmoduleUpdateOptions::RemoteCallbacks) {
      NanScope();
      Handle<v8::Value> to;

       git_remote_callbacks
        *
          remote_callbacks =
        &
          ObjectWrap::Unwrap<GitSubmoduleUpdateOptions>(args.This())->GetValue()->remote_callbacks;
 // start convert_to_v8 block
  
  if (remote_callbacks != NULL) {
    // GitRemoteCallbacks remote_callbacks
       to = GitRemoteCallbacks::New((void *)remote_callbacks, false);
   }
  else {
    to = NanNull();
  }

 // end convert_to_v8 block
      NanReturnValue(to);
    }
     NAN_METHOD(GitSubmoduleUpdateOptions::CloneCheckoutStrategy) {
      NanScope();
      Handle<v8::Value> to;

       unsigned int
         clone_checkout_strategy =
         ObjectWrap::Unwrap<GitSubmoduleUpdateOptions>(args.This())->GetValue()->clone_checkout_strategy;
 // start convert_to_v8 block
     to = NanNew<Number>( clone_checkout_strategy);
  // end convert_to_v8 block
      NanReturnValue(to);
    }
     NAN_METHOD(GitSubmoduleUpdateOptions::Signature) {
      NanScope();
      Handle<v8::Value> to;

       git_signature *
          signature =
          ObjectWrap::Unwrap<GitSubmoduleUpdateOptions>(args.This())->GetValue()->signature;
 // start convert_to_v8 block
  
  if (signature != NULL) {
    // GitSignature signature
       to = GitSignature::New((void *)signature, false);
   }
  else {
    to = NanNull();
  }

 // end convert_to_v8 block
      NanReturnValue(to);
    }
    Persistent<Function> GitSubmoduleUpdateOptions::constructor_template;
 