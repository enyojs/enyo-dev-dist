// This is a generated file, modify: generate/templates/class_content.cc.
#include <nan.h>
#include <string.h>
#include <chrono>
#include <thread>

extern "C" {
  #include <git2.h>
 }

#include "../include/functions/copy.h"
#include "../include/macros.h"
#include "../include/describe_options.h"

 
#include <iostream>

using namespace std;
using namespace v8;
using namespace node;

  GitDescribeOptions::GitDescribeOptions(git_describe_options *raw, bool selfFreeing) {
    this->raw = raw;
    this->selfFreeing = selfFreeing;
  }

  GitDescribeOptions::~GitDescribeOptions() {
 
    // this will cause an error if you have a non-self-freeing object that also needs
    // to save values. Since the object that will eventually free the object has no
    // way of knowing to free these values.
 
  }

  void GitDescribeOptions::InitializeComponent(Handle<v8::Object> target) {
    NanScope();

    Local<FunctionTemplate> tpl = NanNew<FunctionTemplate>(JSNewFunction);

    tpl->InstanceTemplate()->SetInternalFieldCount(1);
    tpl->SetClassName(NanNew<String>("DescribeOptions"));

         NODE_SET_PROTOTYPE_METHOD(tpl, "version", Version);
         NODE_SET_PROTOTYPE_METHOD(tpl, "maxCandidatesTags", MaxCandidatesTags);
         NODE_SET_PROTOTYPE_METHOD(tpl, "describeStrategy", DescribeStrategy);
         NODE_SET_PROTOTYPE_METHOD(tpl, "pattern", Pattern);
         NODE_SET_PROTOTYPE_METHOD(tpl, "onlyFollowFirstParent", OnlyFollowFirstParent);
         NODE_SET_PROTOTYPE_METHOD(tpl, "showCommitOidAsFallback", ShowCommitOidAsFallback);
  
    Local<Function> _constructor_template = tpl->GetFunction();
    NanAssignPersistent(constructor_template, _constructor_template);
    target->Set(NanNew<String>("DescribeOptions"), _constructor_template);
  }

  NAN_METHOD(GitDescribeOptions::JSNewFunction) {
    NanScope();

    if (args.Length() == 0 || !args[0]->IsExternal()) {
         return NanThrowError("A new GitDescribeOptions cannot be instantiated.");
     }

    GitDescribeOptions* object = new GitDescribeOptions(static_cast<git_describe_options *>(Handle<External>::Cast(args[0])->Value()), args[1]->BooleanValue());
    object->Wrap(args.This());

    NanReturnValue(args.This());
  }

  Handle<v8::Value> GitDescribeOptions::New(void *raw, bool selfFreeing) {
    NanEscapableScope();
    Handle<v8::Value> argv[2] = { NanNew<External>((void *)raw), NanNew<Boolean>(selfFreeing) };
    return NanEscapeScope(NanNew<Function>(GitDescribeOptions::constructor_template)->NewInstance(2, argv));
  }

  git_describe_options *GitDescribeOptions::GetValue() {
    return this->raw;
  }

  git_describe_options **GitDescribeOptions::GetRefValue() {
    return this->raw == NULL ? NULL : &this->raw;
  }

  void GitDescribeOptions::ClearValue() {
    this->raw = NULL;
  }

      NAN_METHOD(GitDescribeOptions::Version) {
      NanScope();
      Handle<v8::Value> to;

       unsigned int
         version =
         ObjectWrap::Unwrap<GitDescribeOptions>(args.This())->GetValue()->version;
 // start convert_to_v8 block
     to = NanNew<Number>( version);
  // end convert_to_v8 block
      NanReturnValue(to);
    }
     NAN_METHOD(GitDescribeOptions::MaxCandidatesTags) {
      NanScope();
      Handle<v8::Value> to;

       unsigned int
         max_candidates_tags =
         ObjectWrap::Unwrap<GitDescribeOptions>(args.This())->GetValue()->max_candidates_tags;
 // start convert_to_v8 block
     to = NanNew<Number>( max_candidates_tags);
  // end convert_to_v8 block
      NanReturnValue(to);
    }
     NAN_METHOD(GitDescribeOptions::DescribeStrategy) {
      NanScope();
      Handle<v8::Value> to;

       unsigned int
         describe_strategy =
         ObjectWrap::Unwrap<GitDescribeOptions>(args.This())->GetValue()->describe_strategy;
 // start convert_to_v8 block
     to = NanNew<Number>( describe_strategy);
  // end convert_to_v8 block
      NanReturnValue(to);
    }
     NAN_METHOD(GitDescribeOptions::Pattern) {
      NanScope();
      Handle<v8::Value> to;

       const char *
         pattern =
         ObjectWrap::Unwrap<GitDescribeOptions>(args.This())->GetValue()->pattern;
 // start convert_to_v8 block
  if (pattern){
       to = NanNew<String>(pattern);
   }
  else {
    to = NanNull();
  }

  // end convert_to_v8 block
      NanReturnValue(to);
    }
     NAN_METHOD(GitDescribeOptions::OnlyFollowFirstParent) {
      NanScope();
      Handle<v8::Value> to;

       int
         only_follow_first_parent =
         ObjectWrap::Unwrap<GitDescribeOptions>(args.This())->GetValue()->only_follow_first_parent;
 // start convert_to_v8 block
     to = NanNew<Number>( only_follow_first_parent);
  // end convert_to_v8 block
      NanReturnValue(to);
    }
     NAN_METHOD(GitDescribeOptions::ShowCommitOidAsFallback) {
      NanScope();
      Handle<v8::Value> to;

       int
         show_commit_oid_as_fallback =
         ObjectWrap::Unwrap<GitDescribeOptions>(args.This())->GetValue()->show_commit_oid_as_fallback;
 // start convert_to_v8 block
     to = NanNew<Number>( show_commit_oid_as_fallback);
  // end convert_to_v8 block
      NanReturnValue(to);
    }
    Persistent<Function> GitDescribeOptions::constructor_template;
 