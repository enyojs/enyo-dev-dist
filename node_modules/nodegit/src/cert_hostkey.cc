// This is a generated file, modify: generate/templates/class_content.cc.
#include <nan.h>
#include <string.h>
#include <chrono>
#include <thread>

extern "C" {
  #include <git2.h>
 }

#include "../include/functions/copy.h"
#include "../include/macros.h"
#include "../include/cert_hostkey.h"

 
#include <iostream>

using namespace std;
using namespace v8;
using namespace node;

  GitCertHostkey::GitCertHostkey(git_cert_hostkey *raw, bool selfFreeing) {
    this->raw = raw;
    this->selfFreeing = selfFreeing;
  }

  GitCertHostkey::~GitCertHostkey() {
 
    // this will cause an error if you have a non-self-freeing object that also needs
    // to save values. Since the object that will eventually free the object has no
    // way of knowing to free these values.
 
  }

  void GitCertHostkey::InitializeComponent(Handle<v8::Object> target) {
    NanScope();

    Local<FunctionTemplate> tpl = NanNew<FunctionTemplate>(JSNewFunction);

    tpl->InstanceTemplate()->SetInternalFieldCount(1);
    tpl->SetClassName(NanNew<String>("CertHostkey"));

         NODE_SET_PROTOTYPE_METHOD(tpl, "certType", CertType);
         NODE_SET_PROTOTYPE_METHOD(tpl, "type", Type);
         NODE_SET_PROTOTYPE_METHOD(tpl, "hashMd5", HashMd5);
         NODE_SET_PROTOTYPE_METHOD(tpl, "hashSha1", HashSha1);
  
    Local<Function> _constructor_template = tpl->GetFunction();
    NanAssignPersistent(constructor_template, _constructor_template);
    target->Set(NanNew<String>("CertHostkey"), _constructor_template);
  }

  NAN_METHOD(GitCertHostkey::JSNewFunction) {
    NanScope();

    if (args.Length() == 0 || !args[0]->IsExternal()) {
         return NanThrowError("A new GitCertHostkey cannot be instantiated.");
     }

    GitCertHostkey* object = new GitCertHostkey(static_cast<git_cert_hostkey *>(Handle<External>::Cast(args[0])->Value()), args[1]->BooleanValue());
    object->Wrap(args.This());

    NanReturnValue(args.This());
  }

  Handle<v8::Value> GitCertHostkey::New(void *raw, bool selfFreeing) {
    NanEscapableScope();
    Handle<v8::Value> argv[2] = { NanNew<External>((void *)raw), NanNew<Boolean>(selfFreeing) };
    return NanEscapeScope(NanNew<Function>(GitCertHostkey::constructor_template)->NewInstance(2, argv));
  }

  git_cert_hostkey *GitCertHostkey::GetValue() {
    return this->raw;
  }

  git_cert_hostkey **GitCertHostkey::GetRefValue() {
    return this->raw == NULL ? NULL : &this->raw;
  }

  void GitCertHostkey::ClearValue() {
    this->raw = NULL;
  }

      NAN_METHOD(GitCertHostkey::CertType) {
      NanScope();
      Handle<v8::Value> to;

       git_cert_t
         cert_type =
         ObjectWrap::Unwrap<GitCertHostkey>(args.This())->GetValue()->cert_type;
 // start convert_to_v8 block
     to = NanNew<Number>( cert_type);
  // end convert_to_v8 block
      NanReturnValue(to);
    }
     NAN_METHOD(GitCertHostkey::Type) {
      NanScope();
      Handle<v8::Value> to;

       git_cert_ssh_t
         type =
         ObjectWrap::Unwrap<GitCertHostkey>(args.This())->GetValue()->type;
 // start convert_to_v8 block
     to = NanNew<Number>( type);
  // end convert_to_v8 block
      NanReturnValue(to);
    }
     NAN_METHOD(GitCertHostkey::HashMd5) {
      NanScope();
      Handle<v8::Value> to;

      char* hash_md5 = (char *)ObjectWrap::Unwrap<GitCertHostkey>(args.This())->GetValue()->hash_md5;
 // start convert_to_v8 block
  if (hash_md5){
      to = NanNew<String>(hash_md5, 16);
   }
  else {
    to = NanNull();
  }

  // end convert_to_v8 block
      NanReturnValue(to);
    }
     NAN_METHOD(GitCertHostkey::HashSha1) {
      NanScope();
      Handle<v8::Value> to;

      char* hash_sha1 = (char *)ObjectWrap::Unwrap<GitCertHostkey>(args.This())->GetValue()->hash_sha1;
 // start convert_to_v8 block
  if (hash_sha1){
      to = NanNew<String>(hash_sha1, 20);
   }
  else {
    to = NanNull();
  }

  // end convert_to_v8 block
      NanReturnValue(to);
    }
    Persistent<Function> GitCertHostkey::constructor_template;
 