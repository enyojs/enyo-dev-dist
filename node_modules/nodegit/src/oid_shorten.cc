// This is a generated file, modify: generate/templates/class_content.cc.
#include <nan.h>
#include <string.h>
#include <chrono>
#include <thread>

extern "C" {
  #include <git2.h>
 }

#include "../include/functions/copy.h"
#include "../include/macros.h"
#include "../include/oid_shorten.h"

 
#include <iostream>

using namespace std;
using namespace v8;
using namespace node;

  GitOidShorten::GitOidShorten(git_oid_shorten *raw, bool selfFreeing) {
    this->raw = raw;
    this->selfFreeing = selfFreeing;
  }

  GitOidShorten::~GitOidShorten() {
 
    // this will cause an error if you have a non-self-freeing object that also needs
    // to save values. Since the object that will eventually free the object has no
    // way of knowing to free these values.
 
  }

  void GitOidShorten::InitializeComponent(Handle<v8::Object> target) {
    NanScope();

    Local<FunctionTemplate> tpl = NanNew<FunctionTemplate>(JSNewFunction);

    tpl->InstanceTemplate()->SetInternalFieldCount(1);
    tpl->SetClassName(NanNew<String>("OidShorten"));

  
    Local<Function> _constructor_template = tpl->GetFunction();
    NanAssignPersistent(constructor_template, _constructor_template);
    target->Set(NanNew<String>("OidShorten"), _constructor_template);
  }

  NAN_METHOD(GitOidShorten::JSNewFunction) {
    NanScope();

    if (args.Length() == 0 || !args[0]->IsExternal()) {
         return NanThrowError("A new GitOidShorten cannot be instantiated.");
     }

    GitOidShorten* object = new GitOidShorten(static_cast<git_oid_shorten *>(Handle<External>::Cast(args[0])->Value()), args[1]->BooleanValue());
    object->Wrap(args.This());

    NanReturnValue(args.This());
  }

  Handle<v8::Value> GitOidShorten::New(void *raw, bool selfFreeing) {
    NanEscapableScope();
    Handle<v8::Value> argv[2] = { NanNew<External>((void *)raw), NanNew<Boolean>(selfFreeing) };
    return NanEscapeScope(NanNew<Function>(GitOidShorten::constructor_template)->NewInstance(2, argv));
  }

  git_oid_shorten *GitOidShorten::GetValue() {
    return this->raw;
  }

  git_oid_shorten **GitOidShorten::GetRefValue() {
    return this->raw == NULL ? NULL : &this->raw;
  }

  void GitOidShorten::ClearValue() {
    this->raw = NULL;
  }

     Persistent<Function> GitOidShorten::constructor_template;
 