// This is a generated file, modify: generate/templates/struct_content.cc.
#include <nan.h>
#include <string.h>
#include <chrono>
#include <thread>

extern "C" {
  #include <git2.h>
 }

#include <iostream>
#include "../include/functions/copy.h"
#include "../include/clone_options.h"

  #include "../include/checkout_options.h"
  #include "../include/remote_callbacks.h"
  #include "../include/signature.h"
 
using namespace v8;
using namespace node;
using namespace std;


// generated from struct_content.cc
GitCloneOptions::GitCloneOptions() {
   git_clone_options wrappedValue = GIT_CLONE_OPTIONS_INIT;
   this->raw = (git_clone_options*) malloc(sizeof(git_clone_options));
  memcpy(this->raw, &wrappedValue, sizeof(git_clone_options));

  this->ConstructFields();
  this->selfFreeing = true;
}

GitCloneOptions::GitCloneOptions(git_clone_options* raw, bool selfFreeing) {
  this->raw = raw;
  this->ConstructFields();
  this->selfFreeing = selfFreeing;
}

GitCloneOptions::~GitCloneOptions() {
                           
  if (this->selfFreeing) {
    free(this->raw);
  }
}

void GitCloneOptions::ConstructFields() {
             Local<Object> checkout_optsTemp = GitCheckoutOptions::New(
            &this->raw->checkout_opts,
            false
          )->ToObject();
          NanAssignPersistent(this->checkout_opts, checkout_optsTemp);

             Local<Object> remote_callbacksTemp = GitRemoteCallbacks::New(
            &this->raw->remote_callbacks,
            false
          )->ToObject();
          NanAssignPersistent(this->remote_callbacks, remote_callbacksTemp);

                     Local<Object> signatureTemp = GitSignature::New(
            &this->raw->signature,
            false
          )->ToObject();
          NanAssignPersistent(this->signature, signatureTemp);

   
          Local<Value> repository_cb_payload = NanUndefined();
          NanAssignPersistent(this->repository_cb_payload, repository_cb_payload);
   
          Local<Value> remote_cb_payload = NanUndefined();
          NanAssignPersistent(this->remote_cb_payload, remote_cb_payload);
    }

void GitCloneOptions::InitializeComponent(Handle<v8::Object> target) {
  NanScope();

  Local<FunctionTemplate> tpl = NanNew<FunctionTemplate>(JSNewFunction);

  tpl->InstanceTemplate()->SetInternalFieldCount(1);
  tpl->SetClassName(NanNew<String>("CloneOptions"));

      tpl->InstanceTemplate()->SetAccessor(NanNew<String>("version"), GetVersion, SetVersion);
        tpl->InstanceTemplate()->SetAccessor(NanNew<String>("checkoutOpts"), GetCheckoutOpts, SetCheckoutOpts);
        tpl->InstanceTemplate()->SetAccessor(NanNew<String>("remoteCallbacks"), GetRemoteCallbacks, SetRemoteCallbacks);
        tpl->InstanceTemplate()->SetAccessor(NanNew<String>("bare"), GetBare, SetBare);
        tpl->InstanceTemplate()->SetAccessor(NanNew<String>("local"), GetLocal, SetLocal);
        tpl->InstanceTemplate()->SetAccessor(NanNew<String>("checkoutBranch"), GetCheckoutBranch, SetCheckoutBranch);
        tpl->InstanceTemplate()->SetAccessor(NanNew<String>("signature"), GetSignature, SetSignature);
       
  Local<Function> _constructor_template = tpl->GetFunction();
  NanAssignPersistent(constructor_template, _constructor_template);
  target->Set(NanNew<String>("CloneOptions"), _constructor_template);
}

NAN_METHOD(GitCloneOptions::JSNewFunction) {
  NanScope();
  GitCloneOptions* instance;

  if (args.Length() == 0 || !args[0]->IsExternal()) {
    instance = new GitCloneOptions();
  }
  else {
    instance = new GitCloneOptions(static_cast<git_clone_options*>(Handle<External>::Cast(args[0])->Value()), args[1]->BooleanValue());
  }

  instance->Wrap(args.This());

  NanReturnValue(args.This());
}

Handle<v8::Value> GitCloneOptions::New(void* raw, bool selfFreeing) {
  NanEscapableScope();

  Handle<v8::Value> argv[2] = { NanNew<External>((void *)raw), NanNew<Boolean>(selfFreeing) };
  return NanEscapeScope(NanNew<Function>(GitCloneOptions::constructor_template)->NewInstance(2, argv));
}

git_clone_options *GitCloneOptions::GetValue() {
  return this->raw;
}

git_clone_options **GitCloneOptions::GetRefValue() {
  return this->raw == NULL ? NULL : &this->raw;
}

void GitCloneOptions::ClearValue() {
  this->raw = NULL;
}

    NAN_GETTER(GitCloneOptions::GetVersion) {
      NanScope();

      GitCloneOptions *wrapper = ObjectWrap::Unwrap<GitCloneOptions>(args.This());

        NanReturnValue(NanNew<Number>(wrapper->GetValue()->version));
     }

    NAN_SETTER(GitCloneOptions::SetVersion) {
      NanScope();

      GitCloneOptions *wrapper = ObjectWrap::Unwrap<GitCloneOptions>(args.This());

         if (value->IsNumber()) {
          wrapper->GetValue()->version = (unsigned int) value->Int32Value();
        }
     }

      NAN_GETTER(GitCloneOptions::GetCheckoutOpts) {
      NanScope();

      GitCloneOptions *wrapper = ObjectWrap::Unwrap<GitCloneOptions>(args.This());

        NanReturnValue(NanNew(wrapper->checkout_opts));

     }

    NAN_SETTER(GitCloneOptions::SetCheckoutOpts) {
      NanScope();

      GitCloneOptions *wrapper = ObjectWrap::Unwrap<GitCloneOptions>(args.This());

        Handle<Object> checkout_opts(value->ToObject());
        NanDisposePersistent(wrapper->checkout_opts);

        NanAssignPersistent(wrapper->checkout_opts, checkout_opts);

        wrapper->raw->checkout_opts = *  ObjectWrap::Unwrap<GitCheckoutOptions>(checkout_opts->ToObject())->GetValue() ;

     }

      NAN_GETTER(GitCloneOptions::GetRemoteCallbacks) {
      NanScope();

      GitCloneOptions *wrapper = ObjectWrap::Unwrap<GitCloneOptions>(args.This());

        NanReturnValue(NanNew(wrapper->remote_callbacks));

     }

    NAN_SETTER(GitCloneOptions::SetRemoteCallbacks) {
      NanScope();

      GitCloneOptions *wrapper = ObjectWrap::Unwrap<GitCloneOptions>(args.This());

        Handle<Object> remote_callbacks(value->ToObject());
        NanDisposePersistent(wrapper->remote_callbacks);

        NanAssignPersistent(wrapper->remote_callbacks, remote_callbacks);

        wrapper->raw->remote_callbacks = *  ObjectWrap::Unwrap<GitRemoteCallbacks>(remote_callbacks->ToObject())->GetValue() ;

     }

      NAN_GETTER(GitCloneOptions::GetBare) {
      NanScope();

      GitCloneOptions *wrapper = ObjectWrap::Unwrap<GitCloneOptions>(args.This());

        NanReturnValue(NanNew<Number>(wrapper->GetValue()->bare));
     }

    NAN_SETTER(GitCloneOptions::SetBare) {
      NanScope();

      GitCloneOptions *wrapper = ObjectWrap::Unwrap<GitCloneOptions>(args.This());

         if (value->IsNumber()) {
          wrapper->GetValue()->bare = (int) value->Int32Value();
        }
     }

      NAN_GETTER(GitCloneOptions::GetLocal) {
      NanScope();

      GitCloneOptions *wrapper = ObjectWrap::Unwrap<GitCloneOptions>(args.This());

        NanReturnValue(NanNew((int)wrapper->GetValue()->local));

     }

    NAN_SETTER(GitCloneOptions::SetLocal) {
      NanScope();

      GitCloneOptions *wrapper = ObjectWrap::Unwrap<GitCloneOptions>(args.This());

        if (value->IsNumber()) {
          wrapper->GetValue()->local = (git_clone_local_t) value->Int32Value();
        }

     }

      NAN_GETTER(GitCloneOptions::GetCheckoutBranch) {
      NanScope();

      GitCloneOptions *wrapper = ObjectWrap::Unwrap<GitCloneOptions>(args.This());

        if (wrapper->GetValue()->checkout_branch) {
          NanReturnValue(NanNew<String>(wrapper->GetValue()->checkout_branch));
        }
        else {
          NanReturnUndefined();
        }

     }

    NAN_SETTER(GitCloneOptions::SetCheckoutBranch) {
      NanScope();

      GitCloneOptions *wrapper = ObjectWrap::Unwrap<GitCloneOptions>(args.This());

        if (wrapper->GetValue()->checkout_branch) {
        }

        String::Utf8Value str(value);
        wrapper->GetValue()->checkout_branch = strdup(*str);

     }

      NAN_GETTER(GitCloneOptions::GetSignature) {
      NanScope();

      GitCloneOptions *wrapper = ObjectWrap::Unwrap<GitCloneOptions>(args.This());

        NanReturnValue(NanNew(wrapper->signature));

     }

    NAN_SETTER(GitCloneOptions::SetSignature) {
      NanScope();

      GitCloneOptions *wrapper = ObjectWrap::Unwrap<GitCloneOptions>(args.This());

        Handle<Object> signature(value->ToObject());
        NanDisposePersistent(wrapper->signature);

        NanAssignPersistent(wrapper->signature, signature);

        wrapper->raw->signature =   ObjectWrap::Unwrap<GitSignature>(signature->ToObject())->GetValue() ;

     }

      NAN_GETTER(GitCloneOptions::GetRepositoryCbPayload) {
      NanScope();

      GitCloneOptions *wrapper = ObjectWrap::Unwrap<GitCloneOptions>(args.This());

        NanReturnValue(NanNew(wrapper->repository_cb_payload));

     }

    NAN_SETTER(GitCloneOptions::SetRepositoryCbPayload) {
      NanScope();

      GitCloneOptions *wrapper = ObjectWrap::Unwrap<GitCloneOptions>(args.This());

        NanAssignPersistent(wrapper->repository_cb_payload, value);

     }

      NAN_GETTER(GitCloneOptions::GetRemoteCbPayload) {
      NanScope();

      GitCloneOptions *wrapper = ObjectWrap::Unwrap<GitCloneOptions>(args.This());

        NanReturnValue(NanNew(wrapper->remote_cb_payload));

     }

    NAN_SETTER(GitCloneOptions::SetRemoteCbPayload) {
      NanScope();

      GitCloneOptions *wrapper = ObjectWrap::Unwrap<GitCloneOptions>(args.This());

        NanAssignPersistent(wrapper->remote_cb_payload, value);

     }

   
Persistent<Function> GitCloneOptions::constructor_template;
