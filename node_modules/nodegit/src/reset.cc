// This is a generated file, modify: generate/templates/class_content.cc.
#include <nan.h>
#include <string.h>
#include <chrono>
#include <thread>

extern "C" {
  #include <git2.h>
 }

#include "../include/functions/copy.h"
#include "../include/macros.h"
#include "../include/reset.h"

  #include "../include/repository.h"
  #include "../include/object.h"
  #include "../include/strarray.h"
  #include "../include/checkout_options.h"
  #include "../include/signature.h"
 
#include <iostream>

using namespace std;
using namespace v8;
using namespace node;

 
  void GitReset::InitializeComponent(Handle<v8::Object> target) {
    NanScope();

    Local<Object> object = NanNew<Object>();

        NODE_SET_METHOD(object, "default", Default);
         NODE_SET_METHOD(object, "reset", Reset);
  
    target->Set(NanNew<String>("Reset"), object);
  }

 
/*
 * @param Repository repo
   * @param Object target
   * @param Strarray pathspecs
     */
NAN_METHOD(GitReset::Default) {
  NanScope();

  if (args.Length() == 0 || !args[0]->IsObject()) {
    return NanThrowError("Repository repo is required.");
  }

  if (args.Length() == 2 || !args[2]->BooleanValue()) {
    return NanThrowError("Array, String Object, or string pathspecs is required.");
  }
  if (args.Length() == 3 || !args[3]->IsFunction()) {
    return NanThrowError("Callback is required and must be a Function.");
  }

  DefaultBaton* baton = new DefaultBaton;

  baton->error_code = GIT_OK;
  baton->error = NULL;

// start convert_from_v8 block
  git_repository * from_repo;
  from_repo = ObjectWrap::Unwrap<GitRepository>(args[0]->ToObject())->GetValue();
// end convert_from_v8 block
  baton->repo = from_repo;
// start convert_from_v8 block
  git_object * from_target;
  if (args[1]->IsObject()) {
  from_target = ObjectWrap::Unwrap<GitObject>(args[1]->ToObject())->GetValue();
  }
  else {
    from_target = 0;
  }
// end convert_from_v8 block
  baton->target = from_target;
// start convert_from_v8 block
  git_strarray * from_pathspecs;

  from_pathspecs = StrArrayConverter::Convert(args[2]);
// end convert_from_v8 block
  baton->pathspecs = from_pathspecs;

  NanCallback *callback = new NanCallback(Local<Function>::Cast(args[3]));
  DefaultWorker *worker = new DefaultWorker(baton, callback);
  if (!args[0]->IsUndefined() && !args[0]->IsNull())
    worker->SaveToPersistent("repo", args[0]->ToObject());
  if (!args[1]->IsUndefined() && !args[1]->IsNull())
    worker->SaveToPersistent("target", args[1]->ToObject());
  if (!args[2]->IsUndefined() && !args[2]->IsNull())
    worker->SaveToPersistent("pathspecs", args[2]->ToObject());

  NanAsyncQueueWorker(worker);
  NanReturnUndefined();
}

void GitReset::DefaultWorker::Execute() {
  int result = git_reset_default(
baton->repo,baton->target,baton->pathspecs    );

  baton->error_code = result;

  if (result != GIT_OK && giterr_last() != NULL) {
    baton->error = git_error_dup(giterr_last());
  }

}

void GitReset::DefaultWorker::HandleOKCallback() {
  TryCatch try_catch;

  if (baton->error_code == GIT_OK) {
    Handle<v8::Value> result = NanUndefined();
    Handle<v8::Value> argv[2] = {
      NanNull(),
      result
    };
    callback->Call(2, argv);
  } else {
    if (baton->error) {
      Handle<v8::Value> argv[1] = {
        NanError(baton->error->message)
      };
      callback->Call(1, argv);
      if (baton->error->message)
        free((void *)baton->error->message);
      free((void *)baton->error);
    } else {
      callback->Call(0, NULL);
    }

  }

  if (try_catch.HasCaught()) {
    node::FatalException(try_catch);
  }


  delete baton;
}

  
/*
 * @param Repository repo
   * @param Object target
   * @param Number reset_type
   * @param CheckoutOptions checkout_opts
   * @param Signature signature
   * @param String log_message
     */
NAN_METHOD(GitReset::Reset) {
  NanScope();

  if (args.Length() == 0 || !args[0]->IsObject()) {
    return NanThrowError("Repository repo is required.");
  }

  if (args.Length() == 1 || !args[1]->IsObject()) {
    return NanThrowError("Object target is required.");
  }

  if (args.Length() == 2 || !args[2]->IsNumber()) {
    return NanThrowError("Number reset_type is required.");
  }

  if (args.Length() == 6 || !args[6]->IsFunction()) {
    return NanThrowError("Callback is required and must be a Function.");
  }

  ResetBaton* baton = new ResetBaton;

  baton->error_code = GIT_OK;
  baton->error = NULL;

// start convert_from_v8 block
  git_repository * from_repo;
  from_repo = ObjectWrap::Unwrap<GitRepository>(args[0]->ToObject())->GetValue();
// end convert_from_v8 block
  baton->repo = from_repo;
// start convert_from_v8 block
  git_object * from_target;
  from_target = ObjectWrap::Unwrap<GitObject>(args[1]->ToObject())->GetValue();
// end convert_from_v8 block
  baton->target = from_target;
// start convert_from_v8 block
  git_reset_t from_reset_type;
  from_reset_type = (git_reset_t)  (int) args[2]->ToNumber()->Value();
// end convert_from_v8 block
  baton->reset_type = from_reset_type;
// start convert_from_v8 block
  git_checkout_options * from_checkout_opts;
  if (args[3]->IsObject()) {
  from_checkout_opts = ObjectWrap::Unwrap<GitCheckoutOptions>(args[3]->ToObject())->GetValue();
  }
  else {
    from_checkout_opts = 0;
  }
// end convert_from_v8 block
  baton->checkout_opts = from_checkout_opts;
// start convert_from_v8 block
  const git_signature * from_signature;
  if (args[4]->IsObject()) {
  from_signature = ObjectWrap::Unwrap<GitSignature>(args[4]->ToObject())->GetValue();
  }
  else {
    from_signature = 0;
  }
// end convert_from_v8 block
  baton->signature = from_signature;
// start convert_from_v8 block
  const char * from_log_message;
  if (args[5]->IsString()) {

  String::Utf8Value log_message(args[5]->ToString());
  from_log_message = (const char *) strdup(*log_message);
  }
  else {
    from_log_message = 0;
  }
// end convert_from_v8 block
  baton->log_message = from_log_message;

  NanCallback *callback = new NanCallback(Local<Function>::Cast(args[6]));
  ResetWorker *worker = new ResetWorker(baton, callback);
  if (!args[0]->IsUndefined() && !args[0]->IsNull())
    worker->SaveToPersistent("repo", args[0]->ToObject());
  if (!args[1]->IsUndefined() && !args[1]->IsNull())
    worker->SaveToPersistent("target", args[1]->ToObject());
  if (!args[2]->IsUndefined() && !args[2]->IsNull())
    worker->SaveToPersistent("reset_type", args[2]->ToObject());
  if (!args[3]->IsUndefined() && !args[3]->IsNull())
    worker->SaveToPersistent("checkout_opts", args[3]->ToObject());
  if (!args[4]->IsUndefined() && !args[4]->IsNull())
    worker->SaveToPersistent("signature", args[4]->ToObject());
  if (!args[5]->IsUndefined() && !args[5]->IsNull())
    worker->SaveToPersistent("log_message", args[5]->ToObject());

  NanAsyncQueueWorker(worker);
  NanReturnUndefined();
}

void GitReset::ResetWorker::Execute() {
  int result = git_reset(
baton->repo,baton->target,baton->reset_type,baton->checkout_opts,baton->signature,baton->log_message    );

  baton->error_code = result;

  if (result != GIT_OK && giterr_last() != NULL) {
    baton->error = git_error_dup(giterr_last());
  }

}

void GitReset::ResetWorker::HandleOKCallback() {
  TryCatch try_catch;

  if (baton->error_code == GIT_OK) {
    Handle<v8::Value> result = NanUndefined();
    Handle<v8::Value> argv[2] = {
      NanNull(),
      result
    };
    callback->Call(2, argv);
  } else {
    if (baton->error) {
      Handle<v8::Value> argv[1] = {
        NanError(baton->error->message)
      };
      callback->Call(1, argv);
      if (baton->error->message)
        free((void *)baton->error->message);
      free((void *)baton->error);
    } else {
      callback->Call(0, NULL);
    }

  }

  if (try_catch.HasCaught()) {
    node::FatalException(try_catch);
  }

  free((void *)baton->log_message);

  delete baton;
}

      Persistent<Function> GitReset::constructor_template;
 