#ifndef GITANNOTATEDCOMMIT_H
#define GITANNOTATEDCOMMIT_H
// generated from class_header.h
#include <nan.h>
#include <string>

extern "C" {
#include <git2.h>
}

#include "../include/annotated_commit.h"
#include "../include/repository.h"
#include "../include/oid.h"
#include "../include/reference.h"
// Forward declaration.
struct git_annotated_commit {
};

using namespace node;
using namespace v8;

class GitAnnotatedCommit : public ObjectWrap {
  public:

    static Persistent<Function> constructor_template;
    static void InitializeComponent (Handle<v8::Object> target);

    git_annotated_commit *GetValue();
    git_annotated_commit **GetRefValue();
    void ClearValue();

    static Handle<v8::Value> New(void *raw, bool selfFreeing);
    bool selfFreeing;

                        

  private:


    GitAnnotatedCommit(git_annotated_commit *raw, bool selfFreeing);
    ~GitAnnotatedCommit();
                        
    static NAN_METHOD(JSNewFunction);


    static NAN_METHOD(Free);

    struct FromFetchheadBaton {
      int error_code;
      const git_error* error;
      git_annotated_commit * out;
      git_repository * repo;
      const char * branch_name;
      const char * remote_url;
      const git_oid * id;
      bool idNeedsFree;
    };
    class FromFetchheadWorker : public NanAsyncWorker {
      public:
        FromFetchheadWorker(
            FromFetchheadBaton *_baton,
            NanCallback *callback
        ) : NanAsyncWorker(callback)
          , baton(_baton) {};
        ~FromFetchheadWorker() {};
        void Execute();
        void HandleOKCallback();

      private:
        FromFetchheadBaton *baton;
    };

    static NAN_METHOD(FromFetchhead);

    struct FromRefBaton {
      int error_code;
      const git_error* error;
      git_annotated_commit * out;
      git_repository * repo;
      const git_reference * ref;
    };
    class FromRefWorker : public NanAsyncWorker {
      public:
        FromRefWorker(
            FromRefBaton *_baton,
            NanCallback *callback
        ) : NanAsyncWorker(callback)
          , baton(_baton) {};
        ~FromRefWorker() {};
        void Execute();
        void HandleOKCallback();

      private:
        FromRefBaton *baton;
    };

    static NAN_METHOD(FromRef);

    static NAN_METHOD(Id);

    struct LookupBaton {
      int error_code;
      const git_error* error;
      git_annotated_commit * out;
      git_repository * repo;
      const git_oid * id;
      bool idNeedsFree;
    };
    class LookupWorker : public NanAsyncWorker {
      public:
        LookupWorker(
            LookupBaton *_baton,
            NanCallback *callback
        ) : NanAsyncWorker(callback)
          , baton(_baton) {};
        ~LookupWorker() {};
        void Execute();
        void HandleOKCallback();

      private:
        LookupBaton *baton;
    };

    static NAN_METHOD(Lookup);
    git_annotated_commit *raw;
};

#endif
