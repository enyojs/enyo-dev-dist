#ifndef GITCLONEOPTIONS_H
#define GITCLONEOPTIONS_H
// generated from struct_header.h
#include <nan.h>
#include <string>

extern "C" {
  #include <git2.h>
 }

  #include "../include/checkout_options.h"
  #include "../include/remote_callbacks.h"
  #include "../include/signature.h"
 
using namespace node;
using namespace v8;

class GitCloneOptions : public ObjectWrap {
  public:
    GitCloneOptions(git_clone_options* raw, bool selfFreeing);
    static Persistent<Function> constructor_template;
    static void InitializeComponent (Handle<v8::Object> target);

    git_clone_options *GetValue();
    git_clone_options **GetRefValue();
    void ClearValue();

    static Handle<v8::Value> New(void *raw, bool selfFreeing);

    bool selfFreeing;

                   
  private:
    GitCloneOptions();
    ~GitCloneOptions();

    void ConstructFields();

    static NAN_METHOD(JSNewFunction);

  
        static NAN_GETTER(GetVersion);
        static NAN_SETTER(SetVersion);

             Persistent<Object> checkout_opts;
  
        static NAN_GETTER(GetCheckoutOpts);
        static NAN_SETTER(SetCheckoutOpts);

             Persistent<Object> remote_callbacks;
  
        static NAN_GETTER(GetRemoteCallbacks);
        static NAN_SETTER(SetRemoteCallbacks);

   
        static NAN_GETTER(GetBare);
        static NAN_SETTER(SetBare);

  
        static NAN_GETTER(GetLocal);
        static NAN_SETTER(SetLocal);

   
        static NAN_GETTER(GetCheckoutBranch);
        static NAN_SETTER(SetCheckoutBranch);

             Persistent<Object> signature;
  
        static NAN_GETTER(GetSignature);
        static NAN_SETTER(SetSignature);

             Persistent<Value> repository_cb_payload;
  
        static NAN_GETTER(GetRepositoryCbPayload);
        static NAN_SETTER(SetRepositoryCbPayload);

             Persistent<Value> remote_cb_payload;
  
        static NAN_GETTER(GetRemoteCbPayload);
        static NAN_SETTER(SetRemoteCbPayload);

  
    git_clone_options *raw;
};

#endif
