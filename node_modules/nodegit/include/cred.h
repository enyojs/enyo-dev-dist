#ifndef GITCRED_H
#define GITCRED_H
// generated from class_header.h
#include <nan.h>
#include <string>

extern "C" {
#include <git2.h>
}

#include "../include/cred.h"

using namespace node;
using namespace v8;

class GitCred : public ObjectWrap {
  public:

    static Persistent<Function> constructor_template;
    static void InitializeComponent (Handle<v8::Object> target);

    git_cred *GetValue();
    git_cred **GetRefValue();
    void ClearValue();

    static Handle<v8::Value> New(void *raw, bool selfFreeing);
    bool selfFreeing;

                           

  private:


    GitCred(git_cred *raw, bool selfFreeing);
    ~GitCred();
                           
    static NAN_METHOD(JSNewFunction);


    static NAN_METHOD(DefaultNew);

    static NAN_METHOD(HasUsername);

    static NAN_METHOD(SshKeyFromAgent);

    static NAN_METHOD(SshKeyNew);

    struct UsernameNewBaton {
      int error_code;
      const git_error* error;
      git_cred * cred;
      const char * username;
    };
    class UsernameNewWorker : public NanAsyncWorker {
      public:
        UsernameNewWorker(
            UsernameNewBaton *_baton,
            NanCallback *callback
        ) : NanAsyncWorker(callback)
          , baton(_baton) {};
        ~UsernameNewWorker() {};
        void Execute();
        void HandleOKCallback();

      private:
        UsernameNewBaton *baton;
    };

    static NAN_METHOD(UsernameNew);

    static NAN_METHOD(UserpassPlaintextNew);
    git_cred *raw;
};

#endif
