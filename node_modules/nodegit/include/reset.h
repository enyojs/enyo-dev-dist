#ifndef GITRESET_H
#define GITRESET_H
// generated from class_header.h
#include <nan.h>
#include <string>

extern "C" {
#include <git2.h>
}

#include "../include/repository.h"
#include "../include/object.h"
#include "../include/strarray.h"
#include "../include/checkout_options.h"
#include "../include/signature.h"

using namespace node;
using namespace v8;

class GitReset : public ObjectWrap {
  public:

    static Persistent<Function> constructor_template;
    static void InitializeComponent (Handle<v8::Object> target);

    bool selfFreeing;

              

  private:


              
    static NAN_METHOD(JSNewFunction);


    struct DefaultBaton {
      int error_code;
      const git_error* error;
      git_repository * repo;
      git_object * target;
      git_strarray * pathspecs;
    };
    class DefaultWorker : public NanAsyncWorker {
      public:
        DefaultWorker(
            DefaultBaton *_baton,
            NanCallback *callback
        ) : NanAsyncWorker(callback)
          , baton(_baton) {};
        ~DefaultWorker() {};
        void Execute();
        void HandleOKCallback();

      private:
        DefaultBaton *baton;
    };

    static NAN_METHOD(Default);

    struct ResetBaton {
      int error_code;
      const git_error* error;
      git_repository * repo;
      git_object * target;
      git_reset_t reset_type;
      git_checkout_options * checkout_opts;
      const git_signature * signature;
      const char * log_message;
    };
    class ResetWorker : public NanAsyncWorker {
      public:
        ResetWorker(
            ResetBaton *_baton,
            NanCallback *callback
        ) : NanAsyncWorker(callback)
          , baton(_baton) {};
        ~ResetWorker() {};
        void Execute();
        void HandleOKCallback();

      private:
        ResetBaton *baton;
    };

    static NAN_METHOD(Reset);
};

#endif
