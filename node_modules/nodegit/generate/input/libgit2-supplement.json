{
  "types": {
    "git_cred_default": {
      "decl": "git_cred"
    },
    "git_diff_hunk": {
      "decl": [
        "int old_start",
        "int old_lines",
        "int new_start",
        "int new_lines",
        "size_t header_len",
        "char header[128]"
      ],
      "fields": [
        {
          "name": "old_start",
          "type": "int"
        },
        {
          "name": "old_lines",
          "type": "int"
        },
        {
          "name": "new_start",
          "type": "int"
        },
        {
          "name": "new_lines",
          "type": "int"
        },
        {
          "name": "header_len",
          "type": "size_t"
        },
        {
          "name": "header",
          "type": "char *"
        }
      ]
    },
    "git_diff_line": {
      "decl": [
        "int origin",
        "int old_lineno",
        "int new_lineno",
        "int num_lines",
        "size_t, content_len",
        "git_off_t content_offset",
        "const char * content"
      ],
      "fields": [
        {
          "name": "origin",
          "type": "int"
        },
        {
          "name": "old_lineno",
          "type": "int"
        },
        {
          "name": "new_lineno",
          "type": "int"
        },
        {
          "name": "num_lines",
          "type": "int"
        },
        {
          "name": "content_len",
          "type": "size_t"
        },
        {
          "name": "content_offset",
          "type": "git_off_t"
        },
        {
          "name": "content",
          "type": "const char *"
        }
      ]
    },
    "git_note_iterator": {
      "decl": "git_iterator"
    },
    "git_tree_entry": {
      "fields": [
        {
          "name": "attr",
          "type": "uint16_t"
        },
        {
          "name": "oid",
          "type": "git_oid"
        },
        {
          "name": "filename_len",
          "type": "size_t"
        },
        {
          "name": "filename",
          "structType": "char",
          "structName": "filename[1]",
          "type": "char *"
        }
      ]
    }
  },
  "new" : {
    "functions": {
      "git_rebase_next": {
        "type": "function",
        "file": "rebase.h",
        "args": [
          {
            "name": "out",
            "type": "git_rebase_operation **"
          },
          {
            "name": "rebase",
            "type": "git_rebase *"
          },
          {
            "name": "checkout_opts",
            "type": "git_checkout_options *"
          }
        ],
        "return": {
          "type": "int"
        },
        "group": "rebase"
      },
      "git_reset": {
        "type": "function",
        "file": "reset.h",
        "args": [
          {
            "name": "repo",
            "type": "git_repository *"
          },
          {
            "name": "target",
            "type": "git_object *"
          },
          {
            "name": "reset_type",
            "type": "git_reset_t"
          },
          {
            "name": "checkout_opts",
            "type": "git_checkout_options *"
          },
          {
            "name": "signature",
            "type": "const git_signature *"
          },
          {
            "name": "log_message",
            "type": "const char *"
          }
        ],
        "return": {
          "type": "int"
        },
        "group": "reset"
      },
      "git_stash_save": {
        "type": "function",
        "file": "stash.h",
        "args": [
          {
            "name": "out",
            "type": "git_oid *"
          },
          {
            "name": "repo",
            "type": "git_repository *"
          },
          {
            "name": "stasher",
            "type": "const git_signature *"
          },
          {
            "name": "message",
            "type": "const char *"
          },
          {
            "name": "flags",
            "type": "unsigned int"
          }
        ],
        "return": {
          "type": "int"
        },
        "group": "stash"
      }
    },
    "groups": [
      [
        "annotated_commit",
        [
          "git_annotated_commit_free",
          "git_annotated_commit_from_fetchhead",
          "git_annotated_commit_from_ref",
          "git_annotated_commit_id",
          "git_annotated_commit_lookup"
        ]
      ],
      [
        "odb_object",
        [
          "git_odb_object_data",
          "git_odb_object_dup",
          "git_odb_object_free",
          "git_odb_object_id",
          "git_odb_object_size",
          "git_odb_object_type"
        ]
      ],
      [
        "status_list",
        [
          "git_status_list_entrycount",
          "git_status_list_free",
          "git_status_list_get_perfdata",
          "git_status_list_new"
        ]
      ]
    ],
    "types": [
      [
        "git_direction",
        {
          "type": "enum",
          "description": "Enum to indicate the direction that a remote connection is going to go",
          "fields": [
            {
              "type": "int",
              "name": "GIT_DIRECTION_FETCH",
              "comments": "Fetching from the remote repository",
              "value": 0
            },
            {
              "type": "int",
              "name": "GIT_DIRECTION_PUSH",
              "comments": "Pushing to a remote repository",
              "value": 1
            }
          ]
        }
      ],
      [
        "git_status_entry",
        {
          "fields": [
            {
              "type": "git_status_t",
              "name": "status"
            },
            {
              "type": "git_diff_delta *",
              "name": "head_to_index"
            },
            {
              "type": "git_diff_delta *",
              "name": "index_to_workdir"
            }
          ]
        }
      ],
      [
        "git_diff_perfdata",
        {
          "type": "struct",
          "fields": [
            {
              "type": "unsigned int",
              "name": "version"
            },
            {
              "type": "size_t",
              "name": "stat_calls"
            },
            {
              "type": "size_t",
              "name": "oid_calculations"
            }
          ]
        }
      ],
      [
        "git_merge_options",
        {
          "type": "struct",
          "fields": [
            {
              "type": "unsigned int",
              "name": "version"
            },
            {
              "type": "git_merge_tree_flag_t",
              "name": "flags"
            },
            {
              "type": "unsigned int",
              "name": "rename_threshold"
            },
            {
              "type": "unsigned int",
              "name": "target_limit"
            },
            {
              "type": "git_diff_similarity_metric *",
              "name": "metric",
              "ignore": true
            },
            {
              "type": "git_merge_file_favor_t",
              "name": "file_favor"
            }
          ],
          "used": {
            "needs": [
              "git_merge_init_options"
            ]
          }
        }
      ],
      [
        "git_off_t",
        {
          "type": "enum"
        }
      ],
      [
        "git_remote_autotag_option_t",
        {
          "type": "enum"
        }
      ],
      [
        "git_sort_t",
        {
          "type": "enum",
          "description": "Flags to specify the sorting which a revwalk should perform.",
          "fields": [
            {
              "type": "int",
              "name": "GIT_SORT_NONE",
              "comments": "Sort the repository contents in no particular ordering; this sorting is arbitrary, implementation-specific and subject to change at any time. This is the default sorting for new walkers.",
              "value": 0
            },
            {
              "type": "int",
              "name": "GIT_SORT_TOPOLOGICAL",
              "comments": "Sort the repository contents in topological order (parents before children); this sorting mode can be combined with time sorting.",
              "value": 1
            },
            {
              "type": "int",
              "name": "GIT_SORT_TIME",
              "comments": "Sort the repository contents by commit time; this sorting mode can be combined with topological sorting.",
              "value": 2
            },
            {
              "type": "int",
              "name": "GIT_SORT_REVERSE",
              "comments": "Iterate through the repository contents in reverse order; this sorting mode can be combined with any of the above.",
              "value": 4
            }
          ],
          "comments": ""
        }
      ],
      [
        "git_time_t",
        {
          "type": "enum"
        }
      ],
      [
        "git_trace_level_t",
        {
          "type": "enum"
        }
      ],
      [
        "git_status_options",
        {
          "type": "struct",
          "fields": [
            {
              "type": "unsigned int",
              "name": "version"
            },
            {
              "type": "git_status_show_t",
              "name": "show"
            },
            {
              "type": "git_status_opt_t",
              "name": "flags"
            },
            {
              "type": "git_strarray",
              "name": "pathspec"
            }
          ],
          "used": {
            "needs": [
              "git_status_init_options",
              "git_status_foreach_ext",
              "git_status_list_new"
            ]
          }
        }
      ],
      [
        "git_diff_options",
        {
          "type": "struct",
          "fields": [
            {
              "type": "unsigned int",
              "name": "version"
            },
            {
              "type": "uint32_t",
              "name": "flags"
            },
            {
              "type": "git_submodule_ignore_t",
              "name": "ignore_submodules"
            },
            {
              "type": "git_strarray",
              "name": "pathspec"
            },
            {
              "type": "git_diff_notify_cb",
              "name": "notify_cb"
            },
            {
              "type": "void *",
              "name": "notify_payload"
            },
            {
              "type": "uint32_t",
              "name": "context_lines"
            },
            {
              "type": "uint32_t",
              "name": "interhunk_lines"
            },
            {
              "type": "uint16_t",
              "name": "id_abbrev"
            },
            {
              "type": "git_off_t",
              "name": "max_size"
            },
            {
              "type": "const char *",
              "name": "old_prefix"
            },
            {
              "type": "const char *",
              "name": "new_prefix"
            }
          ],
          "used": {
            "needs": [
              "git_diff_init_options",
              "git_diff_tree_to_workdir",
              "git_diff_tree_to_workdirext",
              "git_diff_tree_to_tree"
            ]
          }
        }
      ]
    ]
  },
  "remove": {
    "annotated": {
      "functions": [
        "git_annotated_commit_free",
        "git_annotated_commit_from_fetchhead",
        "git_annotated_commit_from_ref",
        "git_annotated_commit_id",
        "git_annotated_commit_lookup"
      ]
    },
    "odb": {
      "functions": [
        "git_odb_object_data",
        "git_odb_object_dup",
        "git_odb_object_free",
        "git_odb_object_id",
        "git_odb_object_size",
        "git_odb_object_type"
      ]
    },
    "merge": {
      "functions": [
        "git_merge_head_free",
        "git_merge_head_from_fetchhead",
        "git_merge_head_from_id",
        "git_merge_head_from_ref",
        "git_merge_head_id"
      ]
    },
    "status": {
      "functions": [
        "git_status_list_entrycount",
        "git_status_list_free",
        "git_status_list_get_perfdata",
        "git_status_list_new"
      ]
    }
  },
  "groups": {
    "rebase": [
      "git_rebase_next"
    ],
    "reset": [
      "git_reset"
    ],
    "stash": [
      "git_stash_save"
    ]
  }
}
