{
  "name": "filewatcher",
  "version": "2.2.0",
  "description": "Wrapper around fs.watch with fallback to fs.watchFile",
  "author": {
    "name": "Felix Gnass"
  },
  "keywords": [
    "fs",
    "file",
    "watch",
    "watchFile"
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/fgnass/filewatcher.git"
  },
  "license": "MIT",
  "main": "index.js",
  "scripts": {
    "test": "ulimit -n 100 && ULIMIT=`ulimit -n` node test"
  },
  "devDependencies": {
    "rimraf": "~2.2.2",
    "tap": "^0.5.0"
  },
  "dependencies": {
    "debounce": "^1.0.0"
  },
  "readme": "# filewatcher\n\n[![Build Status](https://travis-ci.org/fgnass/filewatcher.png?branch=master)](https://travis-ci.org/fgnass/filewatcher)\n\nSimple wrapper around `fs.watch` that falls back to `fs.watchFile` when it runs\nout of file handles.\n\nThis module is used by [node-dev](https://npmjs.org/package/node-dev)\nand [instant](https://npmjs.org/package/instant).\n\n### Usage\n\n```js\nvar filewatcher = require('filewatcher')\n\n// the default options\nvar opts = {\n  debounce: 10,    // debounce events in non-polling mode by 10ms\n  interval: 1000,  // if we need to poll, do it every 1000ms\n  persistent: true // don't end the process while files are watched\n}\n\nvar watcher = filewatcher(opts)\n\n// watch a file\nwatcher.add(file)\n\nwatcher.on('change', function(file, stat) {\n  console.log('File modified: %s', file)\n  if (!stat) console.log('deleted')\n})\n\nwatcher.on('fallback', function(limit) {\n  console.log('Ran out of file handles after watching %s files.', limit)\n  console.log('Falling back to polling which uses more CPU.')\n  console.log('Run ulimit -n 10000 to increase the limit for open files.')\n})\n\nwatcher.remove(file)\nwatcher.removeAll()\n```\n\n### The MIT License (MIT)\n\nCopyright (c) 2013-2015 Felix Gnass\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/fgnass/filewatcher/issues"
  },
  "homepage": "https://github.com/fgnass/filewatcher",
  "_id": "filewatcher@2.2.0",
  "_shasum": "d6e13997620da3ff3eb217f0cf1f35cf52572a14",
  "_from": "filewatcher@^2.2.0",
  "_resolved": "https://registry.npmjs.org/filewatcher/-/filewatcher-2.2.0.tgz"
}
